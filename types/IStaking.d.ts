/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStakingInterface extends ethers.utils.Interface {
  functions: {
    "addSchedule((uint256,uint256,uint256,bool,bool,uint256,bool),address)": FunctionFragment;
    "approveQueuedTransfer(address,uint256,uint256,uint256,address)": FunctionFragment;
    "availableForWithdrawal(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositFor(address,uint256,uint256)": FunctionFragment;
    "getQueuedTransfer(address,uint256)": FunctionFragment;
    "getSchedules()": FunctionFragment;
    "getStakes(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "permissionedDepositors(address)": FunctionFragment;
    "queueTransfer(uint256,uint256,uint256,address)": FunctionFragment;
    "rejectQueuedTransfer(address,uint256)": FunctionFragment;
    "removeQueuedTransfer(uint256)": FunctionFragment;
    "requestWithdrawal(uint256,uint256)": FunctionFragment;
    "setNotionalAddresses(uint256[],address[])": FunctionFragment;
    "setPermissionedDepositor(address,bool)": FunctionFragment;
    "setScheduleHardStart(uint256,uint256)": FunctionFragment;
    "setScheduleStatus(uint256,bool)": FunctionFragment;
    "setTransferApprover(address)": FunctionFragment;
    "setUserSchedules(address,uint256[])": FunctionFragment;
    "slash(address[],uint256[],uint256)": FunctionFragment;
    "sweepToScheduleZero(uint256,uint256)": FunctionFragment;
    "transferApprover()": FunctionFragment;
    "unpause()": FunctionFragment;
    "unvested(address,uint256)": FunctionFragment;
    "updateScheduleStart(address[],uint256)": FunctionFragment;
    "vested(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSchedule",
    values: [
      {
        cliff: BigNumberish;
        duration: BigNumberish;
        interval: BigNumberish;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumberish;
        isPublic: boolean;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveQueuedTransfer",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "availableForWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedules",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStakes", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissionedDepositors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransfer",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectQueuedTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNotionalAddresses",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionedDepositor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setScheduleHardStart",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setScheduleStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferApprover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserSchedules",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToScheduleZero",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferApprover",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unvested",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScheduleStart",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vested",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionedDepositors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNotionalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionedDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScheduleHardStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setScheduleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepToScheduleZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unvested", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateScheduleStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vested", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256,uint256)": EventFragment;
    "NotionalAddressesSet(uint256[],address[])": EventFragment;
    "PermissionedDepositorSet(address,bool)": EventFragment;
    "QueuedTransferRejected(address,uint256,uint256,uint256,address,uint256,address)": EventFragment;
    "QueuedTransferRemoved(address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "ScheduleAdded(uint256,uint256,uint256,uint256,bool,bool,uint256,address)": EventFragment;
    "ScheduleHardStartSet(uint256,uint256)": EventFragment;
    "ScheduleRemoved(uint256)": EventFragment;
    "ScheduleStatusSet(uint256,bool)": EventFragment;
    "Slashed(address,uint256,uint256)": EventFragment;
    "StakeTransferred(address,uint256,uint256,uint256,address)": EventFragment;
    "TransferApproverSet(address)": EventFragment;
    "TransferQueued(address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "UserSchedulesSet(address,uint256[])": EventFragment;
    "WithdrawCompleted(address,uint256,uint256)": EventFragment;
    "WithdrawalRequested(address,uint256,uint256)": EventFragment;
    "ZeroSweep(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotionalAddressesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionedDepositorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueuedTransferRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueuedTransferRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleHardStartSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferApproverSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSchedulesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZeroSweep"): EventFragment;
}

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    amount: BigNumber;
    scheduleIx: BigNumber;
  }
>;

export type NotionalAddressesSetEvent = TypedEvent<
  [BigNumber[], string[]] & { scheduleIdxs: BigNumber[]; addresses: string[] }
>;

export type PermissionedDepositorSetEvent = TypedEvent<
  [string, boolean] & { depositor: string; allowed: boolean }
>;

export type QueuedTransferRejectedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber, string] & {
    from: string;
    scheduleFrom: BigNumber;
    scheduleTo: BigNumber;
    amount: BigNumber;
    to: string;
    minCycle: BigNumber;
    rejectedBy: string;
  }
>;

export type QueuedTransferRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    scheduleFrom: BigNumber;
    scheduleTo: BigNumber;
    amount: BigNumber;
    to: string;
    minCycle: BigNumber;
  }
>;

export type ScheduleAddedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    string
  ] & {
    scheduleIndex: BigNumber;
    cliff: BigNumber;
    duration: BigNumber;
    interval: BigNumber;
    setup: boolean;
    isActive: boolean;
    hardStart: BigNumber;
    notional: string;
  }
>;

export type ScheduleHardStartSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { scheduleId: BigNumber; hardStart: BigNumber }
>;

export type ScheduleRemovedEvent = TypedEvent<
  [BigNumber] & { scheduleIndex: BigNumber }
>;

export type ScheduleStatusSetEvent = TypedEvent<
  [BigNumber, boolean] & { scheduleId: BigNumber; isActive: boolean }
>;

export type SlashedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    amount: BigNumber;
    scheduleIx: BigNumber;
  }
>;

export type StakeTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    from: string;
    scheduleFrom: BigNumber;
    scheduleTo: BigNumber;
    amount: BigNumber;
    to: string;
  }
>;

export type TransferApproverSetEvent = TypedEvent<
  [string] & { approverAddress: string }
>;

export type TransferQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    from: string;
    scheduleFrom: BigNumber;
    scheduleTo: BigNumber;
    amount: BigNumber;
    to: string;
    minCycle: BigNumber;
  }
>;

export type UserSchedulesSetEvent = TypedEvent<
  [string, BigNumber[]] & { account: string; userSchedulesIdxs: BigNumber[] }
>;

export type WithdrawCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    scheduleIdx: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawalRequestedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    scheduleIdx: BigNumber;
    amount: BigNumber;
  }
>;

export type ZeroSweepEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    scheduleFrom: BigNumber;
  }
>;

export class IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakingInterface;

  functions: {
    addSchedule(
      schedule: {
        cliff: BigNumberish;
        duration: BigNumberish;
        interval: BigNumberish;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumberish;
        isPublic: boolean;
      },
      notional: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      scheduleIdxTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableForWithdrawal(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      account: string,
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getQueuedTransfer(
      fromAddress: string,
      fromScheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
          from: string;
          scheduleIdxFrom: BigNumber;
          scheduleIdxTo: BigNumber;
          amount: BigNumber;
          to: string;
          minCycle: BigNumber;
        }
      ]
    >;

    getSchedules(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            cliff: BigNumber;
            duration: BigNumber;
            interval: BigNumber;
            setup: boolean;
            isActive: boolean;
            hardStart: BigNumber;
            isPublic: boolean;
          },
          BigNumber
        ] & {
          schedule: [
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            cliff: BigNumber;
            duration: BigNumber;
            interval: BigNumber;
            setup: boolean;
            isActive: boolean;
            hardStart: BigNumber;
            isPublic: boolean;
          };
          index: BigNumber;
        })[]
      ] & {
        retSchedules: ([
          [
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            cliff: BigNumber;
            duration: BigNumber;
            interval: BigNumber;
            setup: boolean;
            isActive: boolean;
            hardStart: BigNumber;
            isPublic: boolean;
          },
          BigNumber
        ] & {
          schedule: [
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            BigNumber,
            boolean
          ] & {
            cliff: BigNumber;
            duration: BigNumber;
            interval: BigNumber;
            setup: boolean;
            isActive: boolean;
            hardStart: BigNumber;
            isPublic: boolean;
          };
          index: BigNumber;
        })[];
      }
    >;

    getStakes(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          initial: BigNumber;
          withdrawn: BigNumber;
          slashed: BigNumber;
          started: BigNumber;
          scheduleIx: BigNumber;
        })[]
      ] & {
        stakes: ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          initial: BigNumber;
          withdrawn: BigNumber;
          slashed: BigNumber;
          started: BigNumber;
          scheduleIx: BigNumber;
        })[];
      }
    >;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permissionedDepositors(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queueTransfer(
      scheduleFrom: BigNumberish,
      scheduleTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeQueuedTransfer(
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNotionalAddresses(
      scheduleIdxArr: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionedDepositor(
      account: string,
      canDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScheduleHardStart(
      scheduleIdx: BigNumberish,
      hardStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setScheduleStatus(
      scheduleIndex: BigNumberish,
      activeBoolean: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferApprover(
      approver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserSchedules(
      account: string,
      userSchedulesIdxs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slash(
      accounts: string[],
      amounts: BigNumberish[],
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToScheduleZero(
      scheduleIdx: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferApprover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unvested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    updateScheduleStart(
      accounts: string[],
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSchedule(
    schedule: {
      cliff: BigNumberish;
      duration: BigNumberish;
      interval: BigNumberish;
      setup: boolean;
      isActive: boolean;
      hardStart: BigNumberish;
      isPublic: boolean;
    },
    notional: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveQueuedTransfer(
    from: string,
    scheduleIdxFrom: BigNumberish,
    scheduleIdxTo: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableForWithdrawal(
    account: string,
    scheduleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    amount: BigNumberish,
    scheduleIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    account: string,
    amount: BigNumberish,
    scheduleIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getQueuedTransfer(
    fromAddress: string,
    fromScheduleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      from: string;
      scheduleIdxFrom: BigNumber;
      scheduleIdxTo: BigNumber;
      amount: BigNumber;
      to: string;
      minCycle: BigNumber;
    }
  >;

  getSchedules(
    overrides?: CallOverrides
  ): Promise<
    ([
      [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        cliff: BigNumber;
        duration: BigNumber;
        interval: BigNumber;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumber;
        isPublic: boolean;
      },
      BigNumber
    ] & {
      schedule: [
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        cliff: BigNumber;
        duration: BigNumber;
        interval: BigNumber;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumber;
        isPublic: boolean;
      };
      index: BigNumber;
    })[]
  >;

  getStakes(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initial: BigNumber;
      withdrawn: BigNumber;
      slashed: BigNumber;
      started: BigNumber;
      scheduleIx: BigNumber;
    })[]
  >;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permissionedDepositors(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queueTransfer(
    scheduleFrom: BigNumberish,
    scheduleTo: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectQueuedTransfer(
    from: string,
    scheduleIdxFrom: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeQueuedTransfer(
    scheduleIdxFrom: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    amount: BigNumberish,
    scheduleIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNotionalAddresses(
    scheduleIdxArr: BigNumberish[],
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionedDepositor(
    account: string,
    canDeposit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScheduleHardStart(
    scheduleIdx: BigNumberish,
    hardStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setScheduleStatus(
    scheduleIndex: BigNumberish,
    activeBoolean: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferApprover(
    approver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserSchedules(
    account: string,
    userSchedulesIdxs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slash(
    accounts: string[],
    amounts: BigNumberish[],
    scheduleIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToScheduleZero(
    scheduleIdx: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferApprover(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unvested(
    account: string,
    scheduleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateScheduleStart(
    accounts: string[],
    scheduleIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vested(
    account: string,
    scheduleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    amount: BigNumberish,
    scheduleIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSchedule(
      schedule: {
        cliff: BigNumberish;
        duration: BigNumberish;
        interval: BigNumberish;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumberish;
        isPublic: boolean;
      },
      notional: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      scheduleIdxTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    availableForWithdrawal(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      account: string,
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getQueuedTransfer(
      fromAddress: string,
      fromScheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        from: string;
        scheduleIdxFrom: BigNumber;
        scheduleIdxTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
      }
    >;

    getSchedules(
      overrides?: CallOverrides
    ): Promise<
      ([
        [
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          cliff: BigNumber;
          duration: BigNumber;
          interval: BigNumber;
          setup: boolean;
          isActive: boolean;
          hardStart: BigNumber;
          isPublic: boolean;
        },
        BigNumber
      ] & {
        schedule: [
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          cliff: BigNumber;
          duration: BigNumber;
          interval: BigNumber;
          setup: boolean;
          isActive: boolean;
          hardStart: BigNumber;
          isPublic: boolean;
        };
        index: BigNumber;
      })[]
    >;

    getStakes(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initial: BigNumber;
        withdrawn: BigNumber;
        slashed: BigNumber;
        started: BigNumber;
        scheduleIx: BigNumber;
      })[]
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    permissionedDepositors(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueTransfer(
      scheduleFrom: BigNumberish,
      scheduleTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeQueuedTransfer(
      scheduleIdxFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNotionalAddresses(
      scheduleIdxArr: BigNumberish[],
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionedDepositor(
      account: string,
      canDeposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setScheduleHardStart(
      scheduleIdx: BigNumberish,
      hardStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setScheduleStatus(
      scheduleIndex: BigNumberish,
      activeBoolean: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferApprover(
      approver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserSchedules(
      account: string,
      userSchedulesIdxs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      accounts: string[],
      amounts: BigNumberish[],
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToScheduleZero(
      scheduleIdx: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferApprover(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unvested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateScheduleStart(
      accounts: string[],
      scheduleIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(address,uint256,uint256)"(
      account?: null,
      amount?: null,
      scheduleIx?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; scheduleIx: BigNumber }
    >;

    Deposited(
      account?: null,
      amount?: null,
      scheduleIx?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; scheduleIx: BigNumber }
    >;

    "NotionalAddressesSet(uint256[],address[])"(
      scheduleIdxs?: null,
      addresses?: null
    ): TypedEventFilter<
      [BigNumber[], string[]],
      { scheduleIdxs: BigNumber[]; addresses: string[] }
    >;

    NotionalAddressesSet(
      scheduleIdxs?: null,
      addresses?: null
    ): TypedEventFilter<
      [BigNumber[], string[]],
      { scheduleIdxs: BigNumber[]; addresses: string[] }
    >;

    "PermissionedDepositorSet(address,bool)"(
      depositor?: null,
      allowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { depositor: string; allowed: boolean }
    >;

    PermissionedDepositorSet(
      depositor?: null,
      allowed?: null
    ): TypedEventFilter<
      [string, boolean],
      { depositor: string; allowed: boolean }
    >;

    "QueuedTransferRejected(address,uint256,uint256,uint256,address,uint256,address)"(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null,
      rejectedBy?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, string],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
        rejectedBy: string;
      }
    >;

    QueuedTransferRejected(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null,
      rejectedBy?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, string],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
        rejectedBy: string;
      }
    >;

    "QueuedTransferRemoved(address,uint256,uint256,uint256,address,uint256)"(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
      }
    >;

    QueuedTransferRemoved(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
      }
    >;

    "ScheduleAdded(uint256,uint256,uint256,uint256,bool,bool,uint256,address)"(
      scheduleIndex?: null,
      cliff?: null,
      duration?: null,
      interval?: null,
      setup?: null,
      isActive?: null,
      hardStart?: null,
      notional?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        string
      ],
      {
        scheduleIndex: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        interval: BigNumber;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumber;
        notional: string;
      }
    >;

    ScheduleAdded(
      scheduleIndex?: null,
      cliff?: null,
      duration?: null,
      interval?: null,
      setup?: null,
      isActive?: null,
      hardStart?: null,
      notional?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        string
      ],
      {
        scheduleIndex: BigNumber;
        cliff: BigNumber;
        duration: BigNumber;
        interval: BigNumber;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumber;
        notional: string;
      }
    >;

    "ScheduleHardStartSet(uint256,uint256)"(
      scheduleId?: null,
      hardStart?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { scheduleId: BigNumber; hardStart: BigNumber }
    >;

    ScheduleHardStartSet(
      scheduleId?: null,
      hardStart?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { scheduleId: BigNumber; hardStart: BigNumber }
    >;

    "ScheduleRemoved(uint256)"(
      scheduleIndex?: null
    ): TypedEventFilter<[BigNumber], { scheduleIndex: BigNumber }>;

    ScheduleRemoved(
      scheduleIndex?: null
    ): TypedEventFilter<[BigNumber], { scheduleIndex: BigNumber }>;

    "ScheduleStatusSet(uint256,bool)"(
      scheduleId?: null,
      isActive?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { scheduleId: BigNumber; isActive: boolean }
    >;

    ScheduleStatusSet(
      scheduleId?: null,
      isActive?: null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { scheduleId: BigNumber; isActive: boolean }
    >;

    "Slashed(address,uint256,uint256)"(
      account?: null,
      amount?: null,
      scheduleIx?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; scheduleIx: BigNumber }
    >;

    Slashed(
      account?: null,
      amount?: null,
      scheduleIx?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; amount: BigNumber; scheduleIx: BigNumber }
    >;

    "StakeTransferred(address,uint256,uint256,uint256,address)"(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
      }
    >;

    StakeTransferred(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
      }
    >;

    "TransferApproverSet(address)"(
      approverAddress?: null
    ): TypedEventFilter<[string], { approverAddress: string }>;

    TransferApproverSet(
      approverAddress?: null
    ): TypedEventFilter<[string], { approverAddress: string }>;

    "TransferQueued(address,uint256,uint256,uint256,address,uint256)"(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
      }
    >;

    TransferQueued(
      from?: null,
      scheduleFrom?: null,
      scheduleTo?: null,
      amount?: null,
      to?: null,
      minCycle?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        from: string;
        scheduleFrom: BigNumber;
        scheduleTo: BigNumber;
        amount: BigNumber;
        to: string;
        minCycle: BigNumber;
      }
    >;

    "UserSchedulesSet(address,uint256[])"(
      account?: null,
      userSchedulesIdxs?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { account: string; userSchedulesIdxs: BigNumber[] }
    >;

    UserSchedulesSet(
      account?: null,
      userSchedulesIdxs?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { account: string; userSchedulesIdxs: BigNumber[] }
    >;

    "WithdrawCompleted(address,uint256,uint256)"(
      account?: null,
      scheduleIdx?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; scheduleIdx: BigNumber; amount: BigNumber }
    >;

    WithdrawCompleted(
      account?: null,
      scheduleIdx?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; scheduleIdx: BigNumber; amount: BigNumber }
    >;

    "WithdrawalRequested(address,uint256,uint256)"(
      account?: null,
      scheduleIdx?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; scheduleIdx: BigNumber; amount: BigNumber }
    >;

    WithdrawalRequested(
      account?: null,
      scheduleIdx?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; scheduleIdx: BigNumber; amount: BigNumber }
    >;

    "ZeroSweep(address,uint256,uint256)"(
      user?: null,
      amount?: null,
      scheduleFrom?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; scheduleFrom: BigNumber }
    >;

    ZeroSweep(
      user?: null,
      amount?: null,
      scheduleFrom?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; scheduleFrom: BigNumber }
    >;
  };

  estimateGas: {
    addSchedule(
      schedule: {
        cliff: BigNumberish;
        duration: BigNumberish;
        interval: BigNumberish;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumberish;
        isPublic: boolean;
      },
      notional: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      scheduleIdxTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableForWithdrawal(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      account: string,
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getQueuedTransfer(
      fromAddress: string,
      fromScheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedules(overrides?: CallOverrides): Promise<BigNumber>;

    getStakes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permissionedDepositors(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queueTransfer(
      scheduleFrom: BigNumberish,
      scheduleTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeQueuedTransfer(
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNotionalAddresses(
      scheduleIdxArr: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionedDepositor(
      account: string,
      canDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScheduleHardStart(
      scheduleIdx: BigNumberish,
      hardStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setScheduleStatus(
      scheduleIndex: BigNumberish,
      activeBoolean: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferApprover(
      approver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserSchedules(
      account: string,
      userSchedulesIdxs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slash(
      accounts: string[],
      amounts: BigNumberish[],
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToScheduleZero(
      scheduleIdx: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferApprover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unvested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateScheduleStart(
      accounts: string[],
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSchedule(
      schedule: {
        cliff: BigNumberish;
        duration: BigNumberish;
        interval: BigNumberish;
        setup: boolean;
        isActive: boolean;
        hardStart: BigNumberish;
        isPublic: boolean;
      },
      notional: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      scheduleIdxTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableForWithdrawal(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      account: string,
      amount: BigNumberish,
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getQueuedTransfer(
      fromAddress: string,
      fromScheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permissionedDepositors(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queueTransfer(
      scheduleFrom: BigNumberish,
      scheduleTo: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectQueuedTransfer(
      from: string,
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeQueuedTransfer(
      scheduleIdxFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNotionalAddresses(
      scheduleIdxArr: BigNumberish[],
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionedDepositor(
      account: string,
      canDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScheduleHardStart(
      scheduleIdx: BigNumberish,
      hardStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setScheduleStatus(
      scheduleIndex: BigNumberish,
      activeBoolean: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferApprover(
      approver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserSchedules(
      account: string,
      userSchedulesIdxs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slash(
      accounts: string[],
      amounts: BigNumberish[],
      scheduleIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToScheduleZero(
      scheduleIdx: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferApprover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unvested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateScheduleStart(
      accounts: string[],
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vested(
      account: string,
      scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      amount: BigNumberish,
      scheduleIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
