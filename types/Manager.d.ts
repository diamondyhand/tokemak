/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ManagerInterface extends ethers.utils.Interface {
  functions: {
    "ADD_LIQUIDITY_ROLE()": FunctionFragment;
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MID_CYCLE_ROLE()": FunctionFragment;
    "MISC_OPERATION_ROLE()": FunctionFragment;
    "REMOVE_LIQUIDITY_ROLE()": FunctionFragment;
    "ROLLOVER_ROLE()": FunctionFragment;
    "START_ROLLOVER_ROLE()": FunctionFragment;
    "_eventSend()": FunctionFragment;
    "completeRollover(string)": FunctionFragment;
    "currentCycle()": FunctionFragment;
    "currentCycleIndex()": FunctionFragment;
    "cycleDuration()": FunctionFragment;
    "cycleRewardsHashes(uint256)": FunctionFragment;
    "destinations()": FunctionFragment;
    "executeMaintenance((tuple[]))": FunctionFragment;
    "executeRollover((tuple[],tuple[],address[],bool,string))": FunctionFragment;
    "getControllers()": FunctionFragment;
    "getCurrentCycle()": FunctionFragment;
    "getCurrentCycleIndex()": FunctionFragment;
    "getCycleDuration()": FunctionFragment;
    "getPools()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRolloverStatus()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "nextCycleStartTime()": FunctionFragment;
    "registerController(bytes32,address)": FunctionFragment;
    "registerPool(address)": FunctionFragment;
    "registeredControllers(bytes32)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rolloverStarted()": FunctionFragment;
    "setCycleDuration(uint256)": FunctionFragment;
    "setDestinations(address,address)": FunctionFragment;
    "setEventSend(bool)": FunctionFragment;
    "setNextCycleStartTime(uint256)": FunctionFragment;
    "setupRole(bytes32)": FunctionFragment;
    "startCycleRollover()": FunctionFragment;
    "sweep(address[])": FunctionFragment;
    "unRegisterController(bytes32)": FunctionFragment;
    "unRegisterPool(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADD_LIQUIDITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MID_CYCLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MISC_OPERATION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_LIQUIDITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLLOVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_ROLLOVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_eventSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeRollover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentCycleIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleRewardsHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destinations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeMaintenance",
    values: [{ cycleSteps: { controllerId: BytesLike; data: BytesLike }[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRollover",
    values: [
      {
        poolData: { pool: string; amount: BigNumberish }[];
        cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
        poolsForWithdraw: string[];
        complete: boolean;
        rewardsIpfsHash: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getControllers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCycleIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCycleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolloverStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCycleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerController",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredControllers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rolloverStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCycleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinations",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventSend",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextCycleStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startCycleRollover",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "unRegisterController",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unRegisterPool",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADD_LIQUIDITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MID_CYCLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MISC_OPERATION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_LIQUIDITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLLOVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_ROLLOVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_eventSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeRollover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCycleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleRewardsHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRollover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCycleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolloverStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCycleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolloverStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCycleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextCycleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startCycleRollover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unRegisterController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unRegisterPool",
    data: BytesLike
  ): Result;

  events: {
    "ControllerRegistered(bytes32,address)": EventFragment;
    "ControllerUnregistered(bytes32,address)": EventFragment;
    "CycleDurationSet(uint256)": EventFragment;
    "CycleRolloverComplete(uint256)": EventFragment;
    "CycleRolloverStarted(uint256)": EventFragment;
    "DeploymentStepExecuted(bytes32,address,bytes)": EventFragment;
    "DestinationsSet(address,address)": EventFragment;
    "EventSendSet(bool)": EventFragment;
    "LiquidityMovedToManager(address,uint256)": EventFragment;
    "LiquidityMovedToPool(address,uint256)": EventFragment;
    "ManagerSwept(address[],uint256[])": EventFragment;
    "NextCycleStartSet(uint256)": EventFragment;
    "PoolRegistered(address)": EventFragment;
    "PoolUnregistered(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CycleDurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CycleRolloverComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CycleRolloverStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentStepExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestinationsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSendSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMovedToManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMovedToPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerSwept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NextCycleStartSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type ControllerRegisteredEvent = TypedEvent<
  [string, string] & { id: string; controller: string }
>;

export type ControllerUnregisteredEvent = TypedEvent<
  [string, string] & { id: string; controller: string }
>;

export type CycleDurationSetEvent = TypedEvent<
  [BigNumber] & { duration: BigNumber }
>;

export type CycleRolloverCompleteEvent = TypedEvent<
  [BigNumber] & { timestamp: BigNumber }
>;

export type CycleRolloverStartedEvent = TypedEvent<
  [BigNumber] & { timestamp: BigNumber }
>;

export type DeploymentStepExecutedEvent = TypedEvent<
  [string, string, string] & {
    controller: string;
    adapaterAddress: string;
    data: string;
  }
>;

export type DestinationsSetEvent = TypedEvent<
  [string, string] & { fxStateSender: string; destinationOnL2: string }
>;

export type EventSendSetEvent = TypedEvent<
  [boolean] & { eventSendSet: boolean }
>;

export type LiquidityMovedToManagerEvent = TypedEvent<
  [string, BigNumber] & { pool: string; amount: BigNumber }
>;

export type LiquidityMovedToPoolEvent = TypedEvent<
  [string, BigNumber] & { pool: string; amount: BigNumber }
>;

export type ManagerSweptEvent = TypedEvent<
  [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
>;

export type NextCycleStartSetEvent = TypedEvent<
  [BigNumber] & { nextCycleStartTime: BigNumber }
>;

export type PoolRegisteredEvent = TypedEvent<[string] & { pool: string }>;

export type PoolUnregisteredEvent = TypedEvent<[string] & { pool: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class Manager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ManagerInterface;

  functions: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MID_CYCLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROLLOVER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    START_ROLLOVER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _eventSend(overrides?: CallOverrides): Promise<[boolean]>;

    completeRollover(
      rewardsIpfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCycleIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleRewardsHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    destinations(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { fxStateSender: string; destinationOnL2: string }
    >;

    executeMaintenance(
      params: { cycleSteps: { controllerId: BytesLike; data: BytesLike }[] },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRollover(
      params: {
        poolData: { pool: string; amount: BigNumberish }[];
        cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
        poolsForWithdraw: string[];
        complete: boolean;
        rewardsIpfsHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getControllers(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentCycleIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCycleDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPools(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRolloverStatus(overrides?: CallOverrides): Promise<[boolean]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _cycleDuration: BigNumberish,
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerController(
      id: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredControllers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rolloverStarted(overrides?: CallOverrides): Promise<[boolean]>;

    setCycleDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDestinations(
      _fxStateSender: string,
      _destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventSend(
      _eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNextCycleStartTime(
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startCycleRollover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      poolAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unRegisterController(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unRegisterPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MID_CYCLE_ROLE(overrides?: CallOverrides): Promise<string>;

  MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

  REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

  ROLLOVER_ROLE(overrides?: CallOverrides): Promise<string>;

  START_ROLLOVER_ROLE(overrides?: CallOverrides): Promise<string>;

  _eventSend(overrides?: CallOverrides): Promise<boolean>;

  completeRollover(
    rewardsIpfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

  currentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

  cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  cycleRewardsHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  destinations(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { fxStateSender: string; destinationOnL2: string }
  >;

  executeMaintenance(
    params: { cycleSteps: { controllerId: BytesLike; data: BytesLike }[] },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRollover(
    params: {
      poolData: { pool: string; amount: BigNumberish }[];
      cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
      poolsForWithdraw: string[];
      complete: boolean;
      rewardsIpfsHash: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getControllers(overrides?: CallOverrides): Promise<string[]>;

  getCurrentCycle(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getCycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getPools(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRolloverStatus(overrides?: CallOverrides): Promise<boolean>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _cycleDuration: BigNumberish,
    _nextCycleStartTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  registerController(
    id: BytesLike,
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredControllers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rolloverStarted(overrides?: CallOverrides): Promise<boolean>;

  setCycleDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDestinations(
    _fxStateSender: string,
    _destinationOnL2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventSend(
    _eventSendSet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNextCycleStartTime(
    _nextCycleStartTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRole(
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startCycleRollover(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    poolAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unRegisterController(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unRegisterPool(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MID_CYCLE_ROLE(overrides?: CallOverrides): Promise<string>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

    ROLLOVER_ROLE(overrides?: CallOverrides): Promise<string>;

    START_ROLLOVER_ROLE(overrides?: CallOverrides): Promise<string>;

    _eventSend(overrides?: CallOverrides): Promise<boolean>;

    completeRollover(
      rewardsIpfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    currentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cycleRewardsHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    destinations(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { fxStateSender: string; destinationOnL2: string }
    >;

    executeMaintenance(
      params: { cycleSteps: { controllerId: BytesLike; data: BytesLike }[] },
      overrides?: CallOverrides
    ): Promise<void>;

    executeRollover(
      params: {
        poolData: { pool: string; amount: BigNumberish }[];
        cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
        poolsForWithdraw: string[];
        complete: boolean;
        rewardsIpfsHash: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getControllers(overrides?: CallOverrides): Promise<string[]>;

    getCurrentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolloverStatus(overrides?: CallOverrides): Promise<boolean>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _cycleDuration: BigNumberish,
      _nextCycleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    registerController(
      id: BytesLike,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerPool(pool: string, overrides?: CallOverrides): Promise<void>;

    registeredControllers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rolloverStarted(overrides?: CallOverrides): Promise<boolean>;

    setCycleDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestinations(
      _fxStateSender: string,
      _destinationOnL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventSend(
      _eventSendSet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextCycleStartTime(
      _nextCycleStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    startCycleRollover(overrides?: CallOverrides): Promise<void>;

    sweep(poolAddresses: string[], overrides?: CallOverrides): Promise<void>;

    unRegisterController(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unRegisterPool(pool: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ControllerRegistered(bytes32,address)"(
      id?: null,
      controller?: null
    ): TypedEventFilter<[string, string], { id: string; controller: string }>;

    ControllerRegistered(
      id?: null,
      controller?: null
    ): TypedEventFilter<[string, string], { id: string; controller: string }>;

    "ControllerUnregistered(bytes32,address)"(
      id?: null,
      controller?: null
    ): TypedEventFilter<[string, string], { id: string; controller: string }>;

    ControllerUnregistered(
      id?: null,
      controller?: null
    ): TypedEventFilter<[string, string], { id: string; controller: string }>;

    "CycleDurationSet(uint256)"(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    CycleDurationSet(
      duration?: null
    ): TypedEventFilter<[BigNumber], { duration: BigNumber }>;

    "CycleRolloverComplete(uint256)"(
      timestamp?: null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    CycleRolloverComplete(
      timestamp?: null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    "CycleRolloverStarted(uint256)"(
      timestamp?: null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    CycleRolloverStarted(
      timestamp?: null
    ): TypedEventFilter<[BigNumber], { timestamp: BigNumber }>;

    "DeploymentStepExecuted(bytes32,address,bytes)"(
      controller?: null,
      adapaterAddress?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { controller: string; adapaterAddress: string; data: string }
    >;

    DeploymentStepExecuted(
      controller?: null,
      adapaterAddress?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { controller: string; adapaterAddress: string; data: string }
    >;

    "DestinationsSet(address,address)"(
      fxStateSender?: null,
      destinationOnL2?: null
    ): TypedEventFilter<
      [string, string],
      { fxStateSender: string; destinationOnL2: string }
    >;

    DestinationsSet(
      fxStateSender?: null,
      destinationOnL2?: null
    ): TypedEventFilter<
      [string, string],
      { fxStateSender: string; destinationOnL2: string }
    >;

    "EventSendSet(bool)"(
      eventSendSet?: null
    ): TypedEventFilter<[boolean], { eventSendSet: boolean }>;

    EventSendSet(
      eventSendSet?: null
    ): TypedEventFilter<[boolean], { eventSendSet: boolean }>;

    "LiquidityMovedToManager(address,uint256)"(
      pool?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    LiquidityMovedToManager(
      pool?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    "LiquidityMovedToPool(address,uint256)"(
      pool?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    LiquidityMovedToPool(
      pool?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; amount: BigNumber }
    >;

    "ManagerSwept(address[],uint256[])"(
      addresses?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { addresses: string[]; amounts: BigNumber[] }
    >;

    ManagerSwept(
      addresses?: null,
      amounts?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { addresses: string[]; amounts: BigNumber[] }
    >;

    "NextCycleStartSet(uint256)"(
      nextCycleStartTime?: null
    ): TypedEventFilter<[BigNumber], { nextCycleStartTime: BigNumber }>;

    NextCycleStartSet(
      nextCycleStartTime?: null
    ): TypedEventFilter<[BigNumber], { nextCycleStartTime: BigNumber }>;

    "PoolRegistered(address)"(
      pool?: null
    ): TypedEventFilter<[string], { pool: string }>;

    PoolRegistered(pool?: null): TypedEventFilter<[string], { pool: string }>;

    "PoolUnregistered(address)"(
      pool?: null
    ): TypedEventFilter<[string], { pool: string }>;

    PoolUnregistered(pool?: null): TypedEventFilter<[string], { pool: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MID_CYCLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROLLOVER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    START_ROLLOVER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _eventSend(overrides?: CallOverrides): Promise<BigNumber>;

    completeRollover(
      rewardsIpfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    currentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cycleRewardsHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destinations(overrides?: CallOverrides): Promise<BigNumber>;

    executeMaintenance(
      params: { cycleSteps: { controllerId: BytesLike; data: BytesLike }[] },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRollover(
      params: {
        poolData: { pool: string; amount: BigNumberish }[];
        cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
        poolsForWithdraw: string[];
        complete: boolean;
        rewardsIpfsHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getControllers(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCycleIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCycleDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolloverStatus(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _cycleDuration: BigNumberish,
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    registerController(
      id: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredControllers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rolloverStarted(overrides?: CallOverrides): Promise<BigNumber>;

    setCycleDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDestinations(
      _fxStateSender: string,
      _destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventSend(
      _eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNextCycleStartTime(
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startCycleRollover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      poolAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unRegisterController(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unRegisterPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADD_LIQUIDITY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MID_CYCLE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MISC_OPERATION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_LIQUIDITY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLLOVER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_ROLLOVER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _eventSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeRollover(
      rewardsIpfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentCycleIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleRewardsHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destinations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMaintenance(
      params: { cycleSteps: { controllerId: BytesLike; data: BytesLike }[] },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRollover(
      params: {
        poolData: { pool: string; amount: BigNumberish }[];
        cycleSteps: { controllerId: BytesLike; data: BytesLike }[];
        poolsForWithdraw: string[];
        complete: boolean;
        rewardsIpfsHash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getControllers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentCycleIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCycleDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolloverStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _cycleDuration: BigNumberish,
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextCycleStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerController(
      id: BytesLike,
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredControllers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rolloverStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCycleDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDestinations(
      _fxStateSender: string,
      _destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventSend(
      _eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNextCycleStartTime(
      _nextCycleStartTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startCycleRollover(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      poolAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unRegisterController(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unRegisterPool(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
