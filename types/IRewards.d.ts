/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRewardsInterface extends ethers.utils.Interface {
  functions: {
    "claim((uint256,uint256,address,uint256),uint8,bytes32,bytes32)": FunctionFragment;
    "claimedAmounts(address)": FunctionFragment;
    "getClaimableAmount((uint256,uint256,address,uint256))": FunctionFragment;
    "rewardsSigner()": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "tokeToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [
      {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "tokeToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokeToken", data: BytesLike): Result;

  events: {
    "Claimed(uint256,address,uint256)": EventFragment;
    "SignerSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerSet"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    cycle: BigNumber;
    recipient: string;
    amount: BigNumber;
  }
>;

export type SignerSetEvent = TypedEvent<[string] & { newSigner: string }>;

export class IRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRewardsInterface;

  functions: {
    claim(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedAmounts(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableAmount(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsSigner(overrides?: CallOverrides): Promise<[string]>;

    setSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokeToken(overrides?: CallOverrides): Promise<[string]>;
  };

  claim(
    recipient: {
      chainId: BigNumberish;
      cycle: BigNumberish;
      wallet: string;
      amount: BigNumberish;
    },
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedAmounts(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableAmount(
    recipient: {
      chainId: BigNumberish;
      cycle: BigNumberish;
      wallet: string;
      amount: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsSigner(overrides?: CallOverrides): Promise<string>;

  setSigner(
    newSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokeToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedAmounts(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmount(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsSigner(overrides?: CallOverrides): Promise<string>;

    setSigner(newSigner: string, overrides?: CallOverrides): Promise<void>;

    tokeToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claimed(uint256,address,uint256)"(
      cycle?: null,
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { cycle: BigNumber; recipient: string; amount: BigNumber }
    >;

    Claimed(
      cycle?: null,
      recipient?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { cycle: BigNumber; recipient: string; amount: BigNumber }
    >;

    "SignerSet(address)"(
      newSigner?: null
    ): TypedEventFilter<[string], { newSigner: string }>;

    SignerSet(
      newSigner?: null
    ): TypedEventFilter<[string], { newSigner: string }>;
  };

  estimateGas: {
    claim(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedAmounts(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAmount(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsSigner(overrides?: CallOverrides): Promise<BigNumber>;

    setSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokeToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedAmounts(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableAmount(
      recipient: {
        chainId: BigNumberish;
        cycle: BigNumberish;
        wallet: string;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSigner(
      newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
