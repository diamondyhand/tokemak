/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConvexFraxControllerInterface extends ethers.utils.Interface {
  functions: {
    "ADD_LIQUIDITY_ROLE()": FunctionFragment;
    "MISC_OPERATION_ROLE()": FunctionFragment;
    "REMOVE_LIQUIDITY_ROLE()": FunctionFragment;
    "VOTER_PROXY()": FunctionFragment;
    "accessControl()": FunctionFragment;
    "addressRegistry()": FunctionFragment;
    "claimRewards(uint256,tuple[])": FunctionFragment;
    "depositAndStakeLockedCurveLp(uint256,address,address,uint256,uint256)": FunctionFragment;
    "getPoolInfo(uint256)": FunctionFragment;
    "lockedStakesOf(uint256,address)": FunctionFragment;
    "manager()": FunctionFragment;
    "withdrawLockedAndUnwrap(bytes32,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADD_LIQUIDITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MISC_OPERATION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_LIQUIDITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTER_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, { token: string; minAmount: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStakeLockedCurveLp",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakesOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLockedAndUnwrap",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADD_LIQUIDITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MISC_OPERATION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_LIQUIDITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTER_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStakeLockedCurveLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLockedAndUnwrap",
    data: BytesLike
  ): Result;

  events: {
    "StakeLocked(bytes32,uint256,uint256,uint256)": EventFragment;
    "VaultCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export type StakeLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    kekId: string;
    pid: BigNumber;
    liquidity: BigNumber;
    secs: BigNumber;
  }
>;

export type VaultCreatedEvent = TypedEvent<
  [string, BigNumber] & { vault: string; pid: BigNumber }
>;

export class ConvexFraxController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConvexFraxControllerInterface;

  functions: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VOTER_PROXY(overrides?: CallOverrides): Promise<[string]>;

    accessControl(overrides?: CallOverrides): Promise<[string]>;

    addressRegistry(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      pid: BigNumberish,
      expectedRewards: { token: string; minAmount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndStakeLockedCurveLp(
      pid: BigNumberish,
      lpToken: string,
      staking: string,
      amount: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoolInfo(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedStakesOf(
      pid: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    withdrawLockedAndUnwrap(
      kekId: BytesLike,
      pid: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

  MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

  REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

  VOTER_PROXY(overrides?: CallOverrides): Promise<string>;

  accessControl(overrides?: CallOverrides): Promise<string>;

  addressRegistry(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    pid: BigNumberish,
    expectedRewards: { token: string; minAmount: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndStakeLockedCurveLp(
    pid: BigNumberish,
    lpToken: string,
    staking: string,
    amount: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoolInfo(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedStakesOf(
    pid: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  withdrawLockedAndUnwrap(
    kekId: BytesLike,
    pid: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<string>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<string>;

    VOTER_PROXY(overrides?: CallOverrides): Promise<string>;

    accessControl(overrides?: CallOverrides): Promise<string>;

    addressRegistry(overrides?: CallOverrides): Promise<string>;

    claimRewards(
      pid: BigNumberish,
      expectedRewards: { token: string; minAmount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndStakeLockedCurveLp(
      pid: BigNumberish,
      lpToken: string,
      staking: string,
      amount: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        implementation: string;
        stakingAddress: string;
        stakingToken: string;
        rewardsAddress: string;
        active: boolean;
      }
    >;

    lockedStakesOf(
      pid: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    manager(overrides?: CallOverrides): Promise<string>;

    withdrawLockedAndUnwrap(
      kekId: BytesLike,
      pid: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StakeLocked(bytes32,uint256,uint256,uint256)"(
      kekId?: BytesLike | null,
      pid?: null,
      liquidity?: null,
      secs?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { kekId: string; pid: BigNumber; liquidity: BigNumber; secs: BigNumber }
    >;

    StakeLocked(
      kekId?: BytesLike | null,
      pid?: null,
      liquidity?: null,
      secs?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { kekId: string; pid: BigNumber; liquidity: BigNumber; secs: BigNumber }
    >;

    "VaultCreated(address,uint256)"(
      vault?: string | null,
      pid?: null
    ): TypedEventFilter<[string, BigNumber], { vault: string; pid: BigNumber }>;

    VaultCreated(
      vault?: string | null,
      pid?: null
    ): TypedEventFilter<[string, BigNumber], { vault: string; pid: BigNumber }>;
  };

  estimateGas: {
    ADD_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MISC_OPERATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_LIQUIDITY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VOTER_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    accessControl(overrides?: CallOverrides): Promise<BigNumber>;

    addressRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      pid: BigNumberish,
      expectedRewards: { token: string; minAmount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndStakeLockedCurveLp(
      pid: BigNumberish,
      lpToken: string,
      staking: string,
      amount: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoolInfo(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedStakesOf(
      pid: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLockedAndUnwrap(
      kekId: BytesLike,
      pid: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADD_LIQUIDITY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MISC_OPERATION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_LIQUIDITY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTER_PROXY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      pid: BigNumberish,
      expectedRewards: { token: string; minAmount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndStakeLockedCurveLp(
      pid: BigNumberish,
      lpToken: string,
      staking: string,
      amount: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedStakesOf(
      pid: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLockedAndUnwrap(
      kekId: BytesLike,
      pid: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
