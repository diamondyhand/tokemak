/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CoreEventInterface extends ethers.utils.Interface {
  functions: {
    "accountData(address,address)": FunctionFragment;
    "addSupportedTokens(tuple[])": FunctionFragment;
    "configureWhitelist((bool,bytes32))": FunctionFragment;
    "deposit(tuple[],bytes32[])": FunctionFragment;
    "durationInfo()": FunctionFragment;
    "finalize(tuple[])": FunctionFragment;
    "getAccountData(address)": FunctionFragment;
    "getRateAdjustedAmounts(uint256,address)": FunctionFragment;
    "getRates()": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "increaseDuration(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDuration(uint256)": FunctionFragment;
    "setNoSwap(address[])": FunctionFragment;
    "setRates(tuple[])": FunctionFragment;
    "stage1Locked()": FunctionFragment;
    "supportedTokens(address)": FunctionFragment;
    "tokenRates(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToTreasury(address[])": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "whitelistSettings()": FunctionFragment;
    "withdraw(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedTokens",
    values: [
      { token: string; maxUserLimit: BigNumberish; systemFinalized: boolean }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureWhitelist",
    values: [{ enabled: boolean; root: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [{ token: string; amount: BigNumberish }[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "durationInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [{ token: string; sendToFarming: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateAdjustedAmounts",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getRates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setNoSwap", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "setRates",
    values: [
      {
        token: string;
        tokeNumerator: BigNumberish;
        tokeDenominator: BigNumberish;
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
        pool: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stage1Locked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenRates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTreasury",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [{ token: string; amount: BigNumberish }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "durationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateAdjustedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNoSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stage1Locked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AssetsFinalized(address,tuple[])": EventFragment;
    "Deposited(address,tuple[])": EventFragment;
    "DurationIncreased(tuple)": EventFragment;
    "DurationSet(tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatesPublished(tuple[])": EventFragment;
    "SetNoSwap(address[])": EventFragment;
    "SupportedTokensAdded(tuple[])": EventFragment;
    "TreasurySet(address)": EventFragment;
    "TreasuryTransfer(tuple[])": EventFragment;
    "WhitelistConfigured(tuple)": EventFragment;
    "Withdrawn(address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetsFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DurationIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DurationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNoSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokensAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type AssetsFinalizedEvent = TypedEvent<
  [
    string,
    ([string, BigNumber, BigNumber] & {
      token: string;
      transferredToFarm: BigNumber;
      refunded: BigNumber;
    })[]
  ] & {
    user: string;
    data: ([string, BigNumber, BigNumber] & {
      token: string;
      transferredToFarm: BigNumber;
      refunded: BigNumber;
    })[];
  }
>;

export type DepositedEvent = TypedEvent<
  [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
    depositor: string;
    tokenInfo: ([string, BigNumber] & { token: string; amount: BigNumber })[];
  }
>;

export type DurationIncreasedEvent = TypedEvent<
  [
    [BigNumber, BigNumber] & {
      startingBlock: BigNumber;
      blockDuration: BigNumber;
    }
  ] & {
    duration: [BigNumber, BigNumber] & {
      startingBlock: BigNumber;
      blockDuration: BigNumber;
    };
  }
>;

export type DurationSetEvent = TypedEvent<
  [
    [BigNumber, BigNumber] & {
      startingBlock: BigNumber;
      blockDuration: BigNumber;
    }
  ] & {
    duration: [BigNumber, BigNumber] & {
      startingBlock: BigNumber;
      blockDuration: BigNumber;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RatesPublishedEvent = TypedEvent<
  [
    ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      token: string;
      tokeNumerator: BigNumber;
      tokeDenominator: BigNumber;
      overNumerator: BigNumber;
      overDenominator: BigNumber;
      pool: string;
    })[]
  ] & {
    ratesData: ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      token: string;
      tokeNumerator: BigNumber;
      tokeDenominator: BigNumber;
      overNumerator: BigNumber;
      overDenominator: BigNumber;
      pool: string;
    })[];
  }
>;

export type SetNoSwapEvent = TypedEvent<[string[]] & { tokens: string[] }>;

export type SupportedTokensAddedEvent = TypedEvent<
  [
    ([string, BigNumber, boolean] & {
      token: string;
      maxUserLimit: BigNumber;
      systemFinalized: boolean;
    })[]
  ] & {
    tokenData: ([string, BigNumber, boolean] & {
      token: string;
      maxUserLimit: BigNumber;
      systemFinalized: boolean;
    })[];
  }
>;

export type TreasurySetEvent = TypedEvent<[string] & { treasury: string }>;

export type TreasuryTransferEvent = TypedEvent<
  [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
    tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[];
  }
>;

export type WhitelistConfiguredEvent = TypedEvent<
  [[boolean, string] & { enabled: boolean; root: string }] & {
    settings: [boolean, string] & { enabled: boolean; root: string };
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
    withdrawer: string;
    tokenInfo: ([string, BigNumber] & { token: string; amount: BigNumber })[];
  }
>;

export class CoreEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoreEventInterface;

  functions: {
    accountData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        token: string;
        depositedBalance: BigNumber;
        finalized: boolean;
      }
    >;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        maxUserLimit: BigNumberish;
        systemFinalized: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenData: { token: string; amount: BigNumberish }[],
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    durationInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        startingBlock: BigNumber;
        blockDuration: BigNumber;
      }
    >;

    finalize(
      tokens: { token: string; sendToFarming: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, boolean] & {
          token: string;
          depositedBalance: BigNumber;
          finalized: boolean;
        })[]
      ] & {
        data: ([string, BigNumber, boolean] & {
          token: string;
          depositedBalance: BigNumber;
          finalized: boolean;
        })[];
      }
    >;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        effectiveAmt: BigNumber;
        ineffectiveAmt: BigNumber;
        actualReceived: BigNumber;
      }
    >;

    getRates(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[]
      ] & {
        rates: ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[];
      }
    >;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[]
      ] & {
        supportedTokensArray: ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[];
      }
    >;

    increaseDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNoSwap(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRates(
      rates: {
        token: string;
        tokeNumerator: BigNumberish;
        tokeDenominator: BigNumberish;
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
        pool: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stage1Locked(overrides?: CallOverrides): Promise<[boolean]>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        token: string;
        maxUserLimit: BigNumber;
        systemFinalized: boolean;
      }
    >;

    tokenRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        token: string;
        tokeNumerator: BigNumber;
        tokeDenominator: BigNumber;
        overNumerator: BigNumber;
        overDenominator: BigNumber;
        pool: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToTreasury(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    whitelistSettings(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

    withdraw(
      tokenData: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountData(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      token: string;
      depositedBalance: BigNumber;
      finalized: boolean;
    }
  >;

  addSupportedTokens(
    tokensToSupport: {
      token: string;
      maxUserLimit: BigNumberish;
      systemFinalized: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureWhitelist(
    settings: { enabled: boolean; root: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenData: { token: string; amount: BigNumberish }[],
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  durationInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      startingBlock: BigNumber;
      blockDuration: BigNumber;
    }
  >;

  finalize(
    tokens: { token: string; sendToFarming: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountData(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, boolean] & {
      token: string;
      depositedBalance: BigNumber;
      finalized: boolean;
    })[]
  >;

  getRateAdjustedAmounts(
    balance: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      effectiveAmt: BigNumber;
      ineffectiveAmt: BigNumber;
      actualReceived: BigNumber;
    }
  >;

  getRates(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      token: string;
      tokeNumerator: BigNumber;
      tokeDenominator: BigNumber;
      overNumerator: BigNumber;
      overDenominator: BigNumber;
      pool: string;
    })[]
  >;

  getSupportedTokens(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, boolean] & {
      token: string;
      maxUserLimit: BigNumber;
      systemFinalized: boolean;
    })[]
  >;

  increaseDuration(
    _blockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDuration(
    _blockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNoSwap(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRates(
    rates: {
      token: string;
      tokeNumerator: BigNumberish;
      tokeDenominator: BigNumberish;
      overNumerator: BigNumberish;
      overDenominator: BigNumberish;
      pool: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stage1Locked(overrides?: CallOverrides): Promise<boolean>;

  supportedTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      token: string;
      maxUserLimit: BigNumber;
      systemFinalized: boolean;
    }
  >;

  tokenRates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      token: string;
      tokeNumerator: BigNumber;
      tokeDenominator: BigNumber;
      overNumerator: BigNumber;
      overDenominator: BigNumber;
      pool: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToTreasury(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  whitelistSettings(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

  withdraw(
    tokenData: { token: string; amount: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        token: string;
        depositedBalance: BigNumber;
        finalized: boolean;
      }
    >;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        maxUserLimit: BigNumberish;
        systemFinalized: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      tokenData: { token: string; amount: BigNumberish }[],
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    durationInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        startingBlock: BigNumber;
        blockDuration: BigNumber;
      }
    >;

    finalize(
      tokens: { token: string; sendToFarming: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, boolean] & {
        token: string;
        depositedBalance: BigNumber;
        finalized: boolean;
      })[]
    >;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        effectiveAmt: BigNumber;
        ineffectiveAmt: BigNumber;
        actualReceived: BigNumber;
      }
    >;

    getRates(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        token: string;
        tokeNumerator: BigNumber;
        tokeDenominator: BigNumber;
        overNumerator: BigNumber;
        overDenominator: BigNumber;
        pool: string;
      })[]
    >;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, boolean] & {
        token: string;
        maxUserLimit: BigNumber;
        systemFinalized: boolean;
      })[]
    >;

    increaseDuration(
      _blockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDuration(
      _blockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNoSwap(tokens: string[], overrides?: CallOverrides): Promise<void>;

    setRates(
      rates: {
        token: string;
        tokeNumerator: BigNumberish;
        tokeDenominator: BigNumberish;
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
        pool: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    stage1Locked(overrides?: CallOverrides): Promise<boolean>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        token: string;
        maxUserLimit: BigNumber;
        systemFinalized: boolean;
      }
    >;

    tokenRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        token: string;
        tokeNumerator: BigNumber;
        tokeDenominator: BigNumber;
        overNumerator: BigNumber;
        overDenominator: BigNumber;
        pool: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToTreasury(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    whitelistSettings(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

    withdraw(
      tokenData: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetsFinalized(address,tuple[])"(
      user?: null,
      data?: null
    ): TypedEventFilter<
      [
        string,
        ([string, BigNumber, BigNumber] & {
          token: string;
          transferredToFarm: BigNumber;
          refunded: BigNumber;
        })[]
      ],
      {
        user: string;
        data: ([string, BigNumber, BigNumber] & {
          token: string;
          transferredToFarm: BigNumber;
          refunded: BigNumber;
        })[];
      }
    >;

    AssetsFinalized(
      user?: null,
      data?: null
    ): TypedEventFilter<
      [
        string,
        ([string, BigNumber, BigNumber] & {
          token: string;
          transferredToFarm: BigNumber;
          refunded: BigNumber;
        })[]
      ],
      {
        user: string;
        data: ([string, BigNumber, BigNumber] & {
          token: string;
          transferredToFarm: BigNumber;
          refunded: BigNumber;
        })[];
      }
    >;

    "Deposited(address,tuple[])"(
      depositor?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]],
      {
        depositor: string;
        tokenInfo: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    Deposited(
      depositor?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]],
      {
        depositor: string;
        tokenInfo: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    "DurationIncreased(tuple)"(
      duration?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        }
      ],
      {
        duration: [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        };
      }
    >;

    DurationIncreased(
      duration?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        }
      ],
      {
        duration: [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        };
      }
    >;

    "DurationSet(tuple)"(
      duration?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        }
      ],
      {
        duration: [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        };
      }
    >;

    DurationSet(
      duration?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        }
      ],
      {
        duration: [BigNumber, BigNumber] & {
          startingBlock: BigNumber;
          blockDuration: BigNumber;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RatesPublished(tuple[])"(
      ratesData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[]
      ],
      {
        ratesData: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[];
      }
    >;

    RatesPublished(
      ratesData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[]
      ],
      {
        ratesData: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          token: string;
          tokeNumerator: BigNumber;
          tokeDenominator: BigNumber;
          overNumerator: BigNumber;
          overDenominator: BigNumber;
          pool: string;
        })[];
      }
    >;

    "SetNoSwap(address[])"(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    SetNoSwap(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    "SupportedTokensAdded(tuple[])"(
      tokenData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[]
      ],
      {
        tokenData: ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[];
      }
    >;

    SupportedTokensAdded(
      tokenData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[]
      ],
      {
        tokenData: ([string, BigNumber, boolean] & {
          token: string;
          maxUserLimit: BigNumber;
          systemFinalized: boolean;
        })[];
      }
    >;

    "TreasurySet(address)"(
      treasury?: null
    ): TypedEventFilter<[string], { treasury: string }>;

    TreasurySet(
      treasury?: null
    ): TypedEventFilter<[string], { treasury: string }>;

    "TreasuryTransfer(tuple[])"(
      tokens?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]],
      { tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[] }
    >;

    TreasuryTransfer(
      tokens?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]],
      { tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[] }
    >;

    "WhitelistConfigured(tuple)"(
      settings?: null
    ): TypedEventFilter<
      [[boolean, string] & { enabled: boolean; root: string }],
      { settings: [boolean, string] & { enabled: boolean; root: string } }
    >;

    WhitelistConfigured(
      settings?: null
    ): TypedEventFilter<
      [[boolean, string] & { enabled: boolean; root: string }],
      { settings: [boolean, string] & { enabled: boolean; root: string } }
    >;

    "Withdrawn(address,tuple[])"(
      withdrawer?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]],
      {
        withdrawer: string;
        tokenInfo: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    Withdrawn(
      withdrawer?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, ([string, BigNumber] & { token: string; amount: BigNumber })[]],
      {
        withdrawer: string;
        tokenInfo: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    accountData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        maxUserLimit: BigNumberish;
        systemFinalized: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenData: { token: string; amount: BigNumberish }[],
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    durationInfo(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      tokens: { token: string; sendToFarming: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRates(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNoSwap(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRates(
      rates: {
        token: string;
        tokeNumerator: BigNumberish;
        tokeDenominator: BigNumberish;
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
        pool: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stage1Locked(overrides?: CallOverrides): Promise<BigNumber>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToTreasury(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSettings(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenData: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        maxUserLimit: BigNumberish;
        systemFinalized: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenData: { token: string; amount: BigNumberish }[],
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    durationInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      tokens: { token: string; sendToFarming: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDuration(
      _blockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNoSwap(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRates(
      rates: {
        token: string;
        tokeNumerator: BigNumberish;
        tokeDenominator: BigNumberish;
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
        pool: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stage1Locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToTreasury(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tokenData: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
