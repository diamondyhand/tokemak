/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20TokenV06",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20TokenV06__factory>;
    getContractFactory(
      name: "INativeOrdersEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INativeOrdersEvents__factory>;
    getContractFactory(
      name: "INativeOrdersFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INativeOrdersFeature__factory>;
    getContractFactory(
      name: "ISignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignaturesValidator__factory>;
    getContractFactory(
      name: "ITemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemporarilyPausable__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizer__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeesCollector__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "SushiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiToken__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "AirdropPush",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropPush__factory>;
    getContractFactory(
      name: "BalanceTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceTracker__factory>;
    getContractFactory(
      name: "BalancerController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerController__factory>;
    getContractFactory(
      name: "BalancerControllerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerControllerV2__factory>;
    getContractFactory(
      name: "BaseController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseController__factory>;
    getContractFactory(
      name: "ConvexController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexController__factory>;
    getContractFactory(
      name: "ConvexFraxController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexFraxController__factory>;
    getContractFactory(
      name: "CurveControllerETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerETH__factory>;
    getContractFactory(
      name: "CurveControllerMetaPool3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerMetaPool3__factory>;
    getContractFactory(
      name: "CurveControllerMetaPool4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerMetaPool4__factory>;
    getContractFactory(
      name: "CurveControllerMetaTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerMetaTemplate__factory>;
    getContractFactory(
      name: "CurveControllerPool2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerPool2__factory>;
    getContractFactory(
      name: "CurveControllerPool3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerPool3__factory>;
    getContractFactory(
      name: "CurveControllerPool4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerPool4__factory>;
    getContractFactory(
      name: "CurveControllerTemplate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerTemplate__factory>;
    getContractFactory(
      name: "CurveControllerV2Pool2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerV2Pool2__factory>;
    getContractFactory(
      name: "CurveControllerV2Pool3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerV2Pool3__factory>;
    getContractFactory(
      name: "CurveControllerV2Pool4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerV2Pool4__factory>;
    getContractFactory(
      name: "CurveControllerV2Template",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveControllerV2Template__factory>;
    getContractFactory(
      name: "PoolTransferController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolTransferController__factory>;
    getContractFactory(
      name: "SushiswapControllerV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiswapControllerV1__factory>;
    getContractFactory(
      name: "SushiswapControllerV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SushiswapControllerV2__factory>;
    getContractFactory(
      name: "TransferController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferController__factory>;
    getContractFactory(
      name: "UniswapController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapController__factory>;
    getContractFactory(
      name: "WethController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WethController__factory>;
    getContractFactory(
      name: "ZeroExController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroExController__factory>;
    getContractFactory(
      name: "CoreEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoreEvent__factory>;
    getContractFactory(
      name: "CycleRolloverTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CycleRolloverTracker__factory>;
    getContractFactory(
      name: "DefiRound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefiRound__factory>;
    getContractFactory(
      name: "DelegateFunction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateFunction__factory>;
    getContractFactory(
      name: "EventProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventProxy__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "IStateReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateReceiver__factory>;
    getContractFactory(
      name: "BalancerHelpers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerHelpers__factory>;
    getContractFactory(
      name: "IBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePool__factory>;
    getContractFactory(
      name: "IBalancerPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerPool__factory>;
    getContractFactory(
      name: "IBalancerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerRegistry__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IConvexBaseRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConvexBaseRewards__factory>;
    getContractFactory(
      name: "IConvexBooster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConvexBooster__factory>;
    getContractFactory(
      name: "IConvexStakingWrapperFrax",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConvexStakingWrapperFrax__factory>;
    getContractFactory(
      name: "IFraxBooster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxBooster__factory>;
    getContractFactory(
      name: "IFraxPoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxPoolRegistry__factory>;
    getContractFactory(
      name: "IFraxUnifiedFarm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxUnifiedFarm__factory>;
    getContractFactory(
      name: "IFraxVoteProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFraxVoteProxy__factory>;
    getContractFactory(
      name: "IStakingProxyConvex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingProxyConvex__factory>;
    getContractFactory(
      name: "IAddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressProvider__factory>;
    getContractFactory(
      name: "ICryptoSwapPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICryptoSwapPool__factory>;
    getContractFactory(
      name: "ICurveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveFactory__factory>;
    getContractFactory(
      name: "IDepositZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositZap__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "IStableSwapPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableSwapPool__factory>;
    getContractFactory(
      name: "IStableSwapPoolETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableSwapPoolETH__factory>;
    getContractFactory(
      name: "EventReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventReceiver__factory>;
    getContractFactory(
      name: "EventSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventSender__factory>;
    getContractFactory(
      name: "IEventReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventReceiver__factory>;
    getContractFactory(
      name: "IEventSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventSender__factory>;
    getContractFactory(
      name: "IAddressRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressRegistry__factory>;
    getContractFactory(
      name: "IBalanceTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalanceTracker__factory>;
    getContractFactory(
      name: "ICoreEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoreEvent__factory>;
    getContractFactory(
      name: "ICycleRolloverTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICycleRolloverTracker__factory>;
    getContractFactory(
      name: "IDefiRound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefiRound__factory>;
    getContractFactory(
      name: "IDelegateFunction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegateFunction__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IEventProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEventProxy__factory>;
    getContractFactory(
      name: "ILiquidityEthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityEthPool__factory>;
    getContractFactory(
      name: "ILiquidityPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityPool__factory>;
    getContractFactory(
      name: "IManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManager__factory>;
    getContractFactory(
      name: "IPCAEthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPCAEthPool__factory>;
    getContractFactory(
      name: "IPCAPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPCAPool__factory>;
    getContractFactory(
      name: "IRewardHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardHash__factory>;
    getContractFactory(
      name: "IRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewards__factory>;
    getContractFactory(
      name: "IRewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsManager__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IVoteTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoteTracker__factory>;
    getContractFactory(
      name: "IWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWallet__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IComplexRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComplexRewarder__factory>;
    getContractFactory(
      name: "IMasterChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChefV2__factory>;
    getContractFactory(
      name: "Manager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Manager__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "FlashBorrowerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashBorrowerMock__factory>;
    getContractFactory(
      name: "ERC1271WalletMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1271WalletMock__factory>;
    getContractFactory(
      name: "EthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthPool__factory>;
    getContractFactory(
      name: "PCAEthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCAEthPool__factory>;
    getContractFactory(
      name: "PCAPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PCAPool__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "Redeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Redeem__factory>;
    getContractFactory(
      name: "AddressRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressRegistry__factory>;
    getContractFactory(
      name: "RewardHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardHash__factory>;
    getContractFactory(
      name: "Rewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rewards__factory>;
    getContractFactory(
      name: "RewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsManager__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "CurveAddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveAddressProvider__factory>;
    getContractFactory(
      name: "TestnetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetToken__factory>;
    getContractFactory(
      name: "TestOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOracle__factory>;
    getContractFactory(
      name: "PreToke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PreToke__factory>;
    getContractFactory(
      name: "SnapshotToke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotToke__factory>;
    getContractFactory(
      name: "Toke",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Toke__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "OnChainVoteL1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainVoteL1__factory>;
    getContractFactory(
      name: "VoteTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteTracker__factory>;
    getContractFactory(
      name: "ZeroExTradeWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroExTradeWallet__factory>;

    getContractAt(
      name: "IERC20TokenV06",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20TokenV06>;
    getContractAt(
      name: "INativeOrdersEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INativeOrdersEvents>;
    getContractAt(
      name: "INativeOrdersFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INativeOrdersFeature>;
    getContractAt(
      name: "ISignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignaturesValidator>;
    getContractAt(
      name: "ITemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemporarilyPausable>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizer>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeesCollector>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "SushiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiToken>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "AirdropPush",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropPush>;
    getContractAt(
      name: "BalanceTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceTracker>;
    getContractAt(
      name: "BalancerController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerController>;
    getContractAt(
      name: "BalancerControllerV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerControllerV2>;
    getContractAt(
      name: "BaseController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseController>;
    getContractAt(
      name: "ConvexController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexController>;
    getContractAt(
      name: "ConvexFraxController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexFraxController>;
    getContractAt(
      name: "CurveControllerETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerETH>;
    getContractAt(
      name: "CurveControllerMetaPool3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerMetaPool3>;
    getContractAt(
      name: "CurveControllerMetaPool4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerMetaPool4>;
    getContractAt(
      name: "CurveControllerMetaTemplate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerMetaTemplate>;
    getContractAt(
      name: "CurveControllerPool2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerPool2>;
    getContractAt(
      name: "CurveControllerPool3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerPool3>;
    getContractAt(
      name: "CurveControllerPool4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerPool4>;
    getContractAt(
      name: "CurveControllerTemplate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerTemplate>;
    getContractAt(
      name: "CurveControllerV2Pool2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerV2Pool2>;
    getContractAt(
      name: "CurveControllerV2Pool3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerV2Pool3>;
    getContractAt(
      name: "CurveControllerV2Pool4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerV2Pool4>;
    getContractAt(
      name: "CurveControllerV2Template",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveControllerV2Template>;
    getContractAt(
      name: "PoolTransferController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolTransferController>;
    getContractAt(
      name: "SushiswapControllerV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiswapControllerV1>;
    getContractAt(
      name: "SushiswapControllerV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SushiswapControllerV2>;
    getContractAt(
      name: "TransferController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferController>;
    getContractAt(
      name: "UniswapController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapController>;
    getContractAt(
      name: "WethController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WethController>;
    getContractAt(
      name: "ZeroExController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroExController>;
    getContractAt(
      name: "CoreEvent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoreEvent>;
    getContractAt(
      name: "CycleRolloverTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CycleRolloverTracker>;
    getContractAt(
      name: "DefiRound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefiRound>;
    getContractAt(
      name: "DelegateFunction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateFunction>;
    getContractAt(
      name: "EventProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventProxy>;
    getContractAt(
      name: "IFxMessageProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: "IFxStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxStateSender>;
    getContractAt(
      name: "IStateReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStateReceiver>;
    getContractAt(
      name: "BalancerHelpers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerHelpers>;
    getContractAt(
      name: "IBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePool>;
    getContractAt(
      name: "IBalancerPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerPool>;
    getContractAt(
      name: "IBalancerRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerRegistry>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IConvexBaseRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConvexBaseRewards>;
    getContractAt(
      name: "IConvexBooster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConvexBooster>;
    getContractAt(
      name: "IConvexStakingWrapperFrax",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConvexStakingWrapperFrax>;
    getContractAt(
      name: "IFraxBooster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxBooster>;
    getContractAt(
      name: "IFraxPoolRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxPoolRegistry>;
    getContractAt(
      name: "IFraxUnifiedFarm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxUnifiedFarm>;
    getContractAt(
      name: "IFraxVoteProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFraxVoteProxy>;
    getContractAt(
      name: "IStakingProxyConvex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingProxyConvex>;
    getContractAt(
      name: "IAddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressProvider>;
    getContractAt(
      name: "ICryptoSwapPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICryptoSwapPool>;
    getContractAt(
      name: "ICurveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveFactory>;
    getContractAt(
      name: "IDepositZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositZap>;
    getContractAt(
      name: "IRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "IStableSwapPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableSwapPool>;
    getContractAt(
      name: "IStableSwapPoolETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableSwapPoolETH>;
    getContractAt(
      name: "EventReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventReceiver>;
    getContractAt(
      name: "EventSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventSender>;
    getContractAt(
      name: "IEventReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventReceiver>;
    getContractAt(
      name: "IEventSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventSender>;
    getContractAt(
      name: "IAddressRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressRegistry>;
    getContractAt(
      name: "IBalanceTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalanceTracker>;
    getContractAt(
      name: "ICoreEvent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoreEvent>;
    getContractAt(
      name: "ICycleRolloverTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICycleRolloverTracker>;
    getContractAt(
      name: "IDefiRound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefiRound>;
    getContractAt(
      name: "IDelegateFunction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegateFunction>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IEventProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEventProxy>;
    getContractAt(
      name: "ILiquidityEthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityEthPool>;
    getContractAt(
      name: "ILiquidityPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityPool>;
    getContractAt(
      name: "IManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManager>;
    getContractAt(
      name: "IPCAEthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPCAEthPool>;
    getContractAt(
      name: "IPCAPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPCAPool>;
    getContractAt(
      name: "IRewardHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardHash>;
    getContractAt(
      name: "IRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewards>;
    getContractAt(
      name: "IRewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsManager>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IVoteTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoteTracker>;
    getContractAt(
      name: "IWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWallet>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IComplexRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComplexRewarder>;
    getContractAt(
      name: "IMasterChefV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChefV2>;
    getContractAt(
      name: "Manager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Manager>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "FlashBorrowerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashBorrowerMock>;
    getContractAt(
      name: "ERC1271WalletMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1271WalletMock>;
    getContractAt(
      name: "EthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthPool>;
    getContractAt(
      name: "PCAEthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCAEthPool>;
    getContractAt(
      name: "PCAPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PCAPool>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "Redeem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Redeem>;
    getContractAt(
      name: "AddressRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressRegistry>;
    getContractAt(
      name: "RewardHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardHash>;
    getContractAt(
      name: "Rewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rewards>;
    getContractAt(
      name: "RewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsManager>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "CurveAddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveAddressProvider>;
    getContractAt(
      name: "TestnetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetToken>;
    getContractAt(
      name: "TestOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOracle>;
    getContractAt(
      name: "PreToke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PreToke>;
    getContractAt(
      name: "SnapshotToke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotToke>;
    getContractAt(
      name: "Toke",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Toke>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "OnChainVoteL1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainVoteL1>;
    getContractAt(
      name: "VoteTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteTracker>;
    getContractAt(
      name: "ZeroExTradeWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroExTradeWallet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
