/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FlashBorrowerMock,
  FlashBorrowerMockInterface,
} from "../FlashBorrowerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC3156FlashLender",
        name: "lender_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum FlashBorrowerMock.Action",
        name: "key",
        type: "uint8",
      },
    ],
    name: "flashBorrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200121138038062001211833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b6110de80620001336000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323e30c8b14610051578063d9caed1214610081578063dc4a79001461009d578063f18d03cc146100b9575b600080fd5b61006b60048036038101906100669190610a36565b6100d5565b6040516100789190610d2a565b60405180910390f35b61009b600480360381019061009691906109e7565b61035d565b005b6100b760048036038101906100b29190610ac8565b6103f1565b005b6100d360048036038101906100ce9190610984565b61083a565b005b6000803073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610dac565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb90610dcc565b60405180910390fd5b600084848101906101e59190610b40565b905060006002811115610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600281111561025a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610288577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9915061034e565b600160028111156102c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160028111156102fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610329577f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc31915061034d565b7f49532a5f05ea72802220479ad080a87868d40922c7a445d10ab5219ff17bbc3191505b5b81925050509695505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9caed128484846040518463ffffffff1660e01b81526004016103ba93929190610cca565b600060405180830381600087803b1580156103d457600080fd5b505af11580156103e8573d6000803e3d6000fd5b50505050505050565b60606000600281111561042d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115610466577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561049457600060405160200161047e9190610d91565b6040516020818303038152906040529050610559565b600160028111156104ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115610507577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561053557600160405160200161051f9190610d91565b6040516020818303038152906040529050610558565b816040516020016105469190610d91565b60405160208183030381529060405290505b5b60008473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e3060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016105b6929190610c5c565b60206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106069190610b69565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7af467a866040518263ffffffff1660e01b81526004016106649190610dec565b60206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610b69565b9050600081866106c49190610e34565b90508673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838661070f9190610e34565b6040518363ffffffff1660e01b815260040161072c929190610d01565b602060405180830381600087803b15801561074657600080fd5b505af115801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190610b17565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635cffe9de308989886040518563ffffffff1660e01b81526004016107de9493929190610d45565b602060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190610b17565b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f18d03cc858585856040518563ffffffff1660e01b81526004016108999493929190610c85565b600060405180830381600087803b1580156108b357600080fd5b505af11580156108c7573d6000803e3d6000fd5b5050505050505050565b6000813590506108e081611053565b92915050565b6000815190506108f58161106a565b92915050565b60008083601f84011261090d57600080fd5b8235905067ffffffffffffffff81111561092657600080fd5b60208301915083600182028301111561093e57600080fd5b9250929050565b60008135905061095481611081565b92915050565b60008135905061096981611091565b92915050565b60008151905061097e81611091565b92915050565b6000806000806080858703121561099a57600080fd5b60006109a8878288016108d1565b94505060206109b9878288016108d1565b93505060406109ca878288016108d1565b92505060606109db8782880161095a565b91505092959194509250565b6000806000606084860312156109fc57600080fd5b6000610a0a868287016108d1565b9350506020610a1b868287016108d1565b9250506040610a2c8682870161095a565b9150509250925092565b60008060008060008060a08789031215610a4f57600080fd5b6000610a5d89828a016108d1565b9650506020610a6e89828a016108d1565b9550506040610a7f89828a0161095a565b9450506060610a9089828a0161095a565b935050608087013567ffffffffffffffff811115610aad57600080fd5b610ab989828a016108fb565b92509250509295509295509295565b600080600060608486031215610add57600080fd5b6000610aeb868287016108d1565b9350506020610afc8682870161095a565b9250506040610b0d86828701610945565b9150509250925092565b600060208284031215610b2957600080fd5b6000610b37848285016108e6565b91505092915050565b600060208284031215610b5257600080fd5b6000610b6084828501610945565b91505092915050565b600060208284031215610b7b57600080fd5b6000610b898482850161096f565b91505092915050565b610b9b81610e8a565b82525050565b610baa81610ea8565b82525050565b6000610bbb82610e07565b610bc58185610e12565b9350610bd5818560208601610f25565b610bde81610fb6565b840191505092915050565b610bf281610eef565b82525050565b610c0181610f13565b82525050565b6000610c14602783610e23565b9150610c1f82610fc7565b604082019050919050565b6000610c37601f83610e23565b9150610c4282611016565b602082019050919050565b610c5681610ee5565b82525050565b6000604082019050610c716000830185610b92565b610c7e6020830184610b92565b9392505050565b6000608082019050610c9a6000830187610b92565b610ca76020830186610b92565b610cb46040830185610b92565b610cc16060830184610c4d565b95945050505050565b6000606082019050610cdf6000830186610b92565b610cec6020830185610b92565b610cf96040830184610c4d565b949350505050565b6000604082019050610d166000830185610b92565b610d236020830184610c4d565b9392505050565b6000602082019050610d3f6000830184610ba1565b92915050565b6000608082019050610d5a6000830187610be9565b610d676020830186610b92565b610d746040830185610c4d565b8181036060830152610d868184610bb0565b905095945050505050565b6000602082019050610da66000830184610bf8565b92915050565b60006020820190508181036000830152610dc581610c07565b9050919050565b60006020820190508181036000830152610de581610c2a565b9050919050565b6000602082019050610e016000830184610c4d565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610e3f82610ee5565b9150610e4a83610ee5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e7f57610e7e610f58565b5b828201905092915050565b6000610e9582610ec5565b9050919050565b60008115159050919050565b6000819050919050565b6000819050610ec08261103f565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610efa82610f01565b9050919050565b6000610f0c82610ec5565b9050919050565b6000610f1e82610eb2565b9050919050565b60005b83811015610f43578082015181840152602081019050610f28565b83811115610f52576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f466c617368426f72726f7765723a20556e74727573746564206c6f616e20696e60008201527f69746961746f7200000000000000000000000000000000000000000000000000602082015250565b7f466c617368426f72726f7765723a20556e74727573746564206c656e64657200600082015250565b600381106110505761104f610f87565b5b50565b61105c81610e8a565b811461106757600080fd5b50565b61107381610e9c565b811461107e57600080fd5b50565b6003811061108e57600080fd5b50565b61109a81610ee5565b81146110a557600080fd5b5056fea264697066735822122001c2d5abdc477af6ef48598fab995e53dc875da5b2f127f8597d388c9839433664736f6c63430008040033";

export class FlashBorrowerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FlashBorrowerMock> {
    return super.deploy(lender_, overrides || {}) as Promise<FlashBorrowerMock>;
  }
  getDeployTransaction(
    lender_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(lender_, overrides || {});
  }
  attach(address: string): FlashBorrowerMock {
    return super.attach(address) as FlashBorrowerMock;
  }
  connect(signer: Signer): FlashBorrowerMock__factory {
    return super.connect(signer) as FlashBorrowerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashBorrowerMockInterface {
    return new utils.Interface(_abi) as FlashBorrowerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlashBorrowerMock {
    return new Contract(address, _abi, signerOrProvider) as FlashBorrowerMock;
  }
}
