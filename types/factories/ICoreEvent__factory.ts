/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ICoreEvent, ICoreEventInterface } from "../ICoreEvent";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "transferredToFarm",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refunded",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.FinalizedAccountData[]",
        name: "data",
        type: "tuple[]",
      },
    ],
    name: "AssetsFinalized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.TokenData[]",
        name: "tokenInfo",
        type: "tuple[]",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startingBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockDuration",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.DurationInfo",
        name: "duration",
        type: "tuple",
      },
    ],
    name: "DurationIncreased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startingBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockDuration",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.DurationInfo",
        name: "duration",
        type: "tuple",
      },
    ],
    name: "DurationSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokeNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokeDenominator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overDenominator",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.RateData[]",
        name: "ratesData",
        type: "tuple[]",
      },
    ],
    name: "RatesPublished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "SetNoSwap",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxUserLimit",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "systemFinalized",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.SupportedTokenData[]",
        name: "tokenData",
        type: "tuple[]",
      },
    ],
    name: "SupportedTokensAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "treasury",
        type: "address",
      },
    ],
    name: "TreasurySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.TokenData[]",
        name: "tokens",
        type: "tuple[]",
      },
    ],
    name: "TreasuryTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "enabled",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "root",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.WhitelistSettings",
        name: "settings",
        type: "tuple",
      },
    ],
    name: "WhitelistConfigured",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct ICoreEvent.TokenData[]",
        name: "tokenInfo",
        type: "tuple[]",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxUserLimit",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "systemFinalized",
            type: "bool",
          },
        ],
        internalType: "struct ICoreEvent.SupportedTokenData[]",
        name: "tokensToSupport",
        type: "tuple[]",
      },
    ],
    name: "addSupportedTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "enabled",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "root",
            type: "bytes32",
          },
        ],
        internalType: "struct ICoreEvent.WhitelistSettings",
        name: "settings",
        type: "tuple",
      },
    ],
    name: "configureWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ICoreEvent.TokenData[]",
        name: "tokenData",
        type: "tuple[]",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "bool",
            name: "sendToFarming",
            type: "bool",
          },
        ],
        internalType: "struct ICoreEvent.TokenFarming[]",
        name: "tokens",
        type: "tuple[]",
      },
    ],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "depositedBalance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "finalized",
            type: "bool",
          },
        ],
        internalType: "struct ICoreEvent.AccountData[]",
        name: "data",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getRateAdjustedAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "effectiveAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ineffectiveAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualReceived",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRates",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokeNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokeDenominator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overDenominator",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
        ],
        internalType: "struct ICoreEvent.RateData[]",
        name: "rates",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupportedTokens",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxUserLimit",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "systemFinalized",
            type: "bool",
          },
        ],
        internalType: "struct ICoreEvent.SupportedTokenData[]",
        name: "supportedTokensArray",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockDuration",
        type: "uint256",
      },
    ],
    name: "increaseDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockDuration",
        type: "uint256",
      },
    ],
    name: "setDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "setNoSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokeNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokeDenominator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overNumerator",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "overDenominator",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
        ],
        internalType: "struct ICoreEvent.RateData[]",
        name: "rates",
        type: "tuple[]",
      },
    ],
    name: "setRates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "transferToTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ICoreEvent.TokenData[]",
        name: "tokenData",
        type: "tuple[]",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ICoreEvent__factory {
  static readonly abi = _abi;
  static createInterface(): ICoreEventInterface {
    return new utils.Interface(_abi) as ICoreEventInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICoreEvent {
    return new Contract(address, _abi, signerOrProvider) as ICoreEvent;
  }
}
