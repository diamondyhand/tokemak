/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventSenderInterface extends ethers.utils.Interface {
  functions: {
    "destinations()": FunctionFragment;
    "eventSend()": FunctionFragment;
    "setDestinations(address,address)": FunctionFragment;
    "setEventSend(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "destinations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eventSend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDestinations",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventSend",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "destinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventSend",
    data: BytesLike
  ): Result;

  events: {
    "DestinationsSet(address,address)": EventFragment;
    "EventSendSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DestinationsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventSendSet"): EventFragment;
}

export type DestinationsSetEvent = TypedEvent<
  [string, string] & { fxStateSender: string; destinationOnL2: string }
>;

export type EventSendSetEvent = TypedEvent<
  [boolean] & { eventSendSet: boolean }
>;

export class EventSender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventSenderInterface;

  functions: {
    destinations(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { fxStateSender: string; destinationOnL2: string }
    >;

    eventSend(overrides?: CallOverrides): Promise<[boolean]>;

    setDestinations(
      fxStateSender: string,
      destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventSend(
      eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  destinations(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { fxStateSender: string; destinationOnL2: string }
  >;

  eventSend(overrides?: CallOverrides): Promise<boolean>;

  setDestinations(
    fxStateSender: string,
    destinationOnL2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventSend(
    eventSendSet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    destinations(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { fxStateSender: string; destinationOnL2: string }
    >;

    eventSend(overrides?: CallOverrides): Promise<boolean>;

    setDestinations(
      fxStateSender: string,
      destinationOnL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventSend(
      eventSendSet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DestinationsSet(address,address)"(
      fxStateSender?: null,
      destinationOnL2?: null
    ): TypedEventFilter<
      [string, string],
      { fxStateSender: string; destinationOnL2: string }
    >;

    DestinationsSet(
      fxStateSender?: null,
      destinationOnL2?: null
    ): TypedEventFilter<
      [string, string],
      { fxStateSender: string; destinationOnL2: string }
    >;

    "EventSendSet(bool)"(
      eventSendSet?: null
    ): TypedEventFilter<[boolean], { eventSendSet: boolean }>;

    EventSendSet(
      eventSendSet?: null
    ): TypedEventFilter<[boolean], { eventSendSet: boolean }>;
  };

  estimateGas: {
    destinations(overrides?: CallOverrides): Promise<BigNumber>;

    eventSend(overrides?: CallOverrides): Promise<BigNumber>;

    setDestinations(
      fxStateSender: string,
      destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventSend(
      eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    destinations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDestinations(
      fxStateSender: string,
      destinationOnL2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventSend(
      eventSendSet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
