/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CurveAddressProviderInterface extends ethers.utils.Interface {
  functions: {
    "add_new_id(address,string)": FunctionFragment;
    "admin()": FunctionFragment;
    "apply_transfer_ownership()": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "deadline_add()": FunctionFragment;
    "future_admin()": FunctionFragment;
    "get_address(uint256)": FunctionFragment;
    "get_id_info(uint256)": FunctionFragment;
    "get_registry()": FunctionFragment;
    "max_id()": FunctionFragment;
    "revert_transfer_ownership()": FunctionFragment;
    "set_address(uint256,address)": FunctionFragment;
    "set_deadline_add(uint256)": FunctionFragment;
    "set_registry(address)": FunctionFragment;
    "transfer_ownership_deadline()": FunctionFragment;
    "unset_address(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add_new_id",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apply_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deadline_add",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_address",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_id_info",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_registry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "max_id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revert_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_address",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_deadline_add",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_registry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_ownership_deadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unset_address",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add_new_id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "apply_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadline_add",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_id_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max_id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revert_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_deadline_add",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_ownership_deadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unset_address",
    data: BytesLike
  ): Result;

  events: {
    "AddressModified(uint256,address,uint256)": EventFragment;
    "CommitNewAdmin(uint256,address)": EventFragment;
    "NewAddressIdentifier(uint256,address,string)": EventFragment;
    "NewAdmin(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitNewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAddressIdentifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
}

export type AddressModifiedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    id: BigNumber;
    new_address: string;
    version: BigNumber;
  }
>;

export type CommitNewAdminEvent = TypedEvent<
  [BigNumber, string] & { deadline: BigNumber; admin: string }
>;

export type NewAddressIdentifierEvent = TypedEvent<
  [BigNumber, string, string] & {
    id: BigNumber;
    addr: string;
    description: string;
  }
>;

export type NewAdminEvent = TypedEvent<[string] & { admin: string }>;

export class CurveAddressProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CurveAddressProviderInterface;

  functions: {
    add_new_id(
      _address: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _new_admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deadline_add(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_id_info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, string] & {
        addr: string;
        is_active: boolean;
        version: BigNumber;
        last_modified: BigNumber;
        description: string;
      }
    >;

    get_registry(overrides?: CallOverrides): Promise<[string]>;

    max_id(overrides?: CallOverrides): Promise<[BigNumber]>;

    revert_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_address(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_deadline_add(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_registry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer_ownership_deadline(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unset_address(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add_new_id(
    _address: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  apply_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _new_admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deadline_add(overrides?: CallOverrides): Promise<BigNumber>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  get_address(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  get_id_info(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, string] & {
      addr: string;
      is_active: boolean;
      version: BigNumber;
      last_modified: BigNumber;
      description: string;
    }
  >;

  get_registry(overrides?: CallOverrides): Promise<string>;

  max_id(overrides?: CallOverrides): Promise<BigNumber>;

  revert_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_address(
    _id: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_deadline_add(
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_registry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

  unset_address(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add_new_id(
      _address: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<boolean>;

    commit_transfer_ownership(
      _new_admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deadline_add(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    get_address(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    get_id_info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, string] & {
        addr: string;
        is_active: boolean;
        version: BigNumber;
        last_modified: BigNumber;
        description: string;
      }
    >;

    get_registry(overrides?: CallOverrides): Promise<string>;

    max_id(overrides?: CallOverrides): Promise<BigNumber>;

    revert_transfer_ownership(overrides?: CallOverrides): Promise<boolean>;

    set_address(
      _id: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    set_deadline_add(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_registry(_registry: string, overrides?: CallOverrides): Promise<void>;

    transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    unset_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddressModified(uint256,address,uint256)"(
      id?: BigNumberish | null,
      new_address?: null,
      version?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { id: BigNumber; new_address: string; version: BigNumber }
    >;

    AddressModified(
      id?: BigNumberish | null,
      new_address?: null,
      version?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { id: BigNumber; new_address: string; version: BigNumber }
    >;

    "CommitNewAdmin(uint256,address)"(
      deadline?: BigNumberish | null,
      admin?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { deadline: BigNumber; admin: string }
    >;

    CommitNewAdmin(
      deadline?: BigNumberish | null,
      admin?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { deadline: BigNumber; admin: string }
    >;

    "NewAddressIdentifier(uint256,address,string)"(
      id?: BigNumberish | null,
      addr?: null,
      description?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; addr: string; description: string }
    >;

    NewAddressIdentifier(
      id?: BigNumberish | null,
      addr?: null,
      description?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; addr: string; description: string }
    >;

    "NewAdmin(address)"(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    NewAdmin(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;
  };

  estimateGas: {
    add_new_id(
      _address: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _new_admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deadline_add(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_id_info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_registry(overrides?: CallOverrides): Promise<BigNumber>;

    max_id(overrides?: CallOverrides): Promise<BigNumber>;

    revert_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_address(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_deadline_add(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_registry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer_ownership_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    unset_address(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add_new_id(
      _address: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _new_admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deadline_add(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_address(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_id_info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    max_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revert_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_address(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_deadline_add(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_registry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer_ownership_deadline(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unset_address(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
