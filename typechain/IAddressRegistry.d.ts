/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAddressRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addRegistrar(address)": FunctionFragment;
    "addToRegistry(address[],uint8)": FunctionFragment;
    "checkAddress(address,uint256)": FunctionFragment;
    "getAddressForType(uint8)": FunctionFragment;
    "removeFromRegistry(address[],uint8)": FunctionFragment;
    "removeRegistrar(address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRegistrar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToRegistry",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressForType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromRegistry",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRegistrar",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressForType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddedToRegistry(address[],uint8)": EventFragment;
    "RegisteredAddressAdded(address)": EventFragment;
    "RegisteredAddressRemoved(address)": EventFragment;
    "RemovedFromRegistry(address[],uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToRegistry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromRegistry"): EventFragment;
}

export type AddedToRegistryEvent = TypedEvent<
  [string[], number] & { addresses: string[]; arg1: number }
>;

export type RegisteredAddressAddedEvent = TypedEvent<
  [string] & { added: string }
>;

export type RegisteredAddressRemovedEvent = TypedEvent<
  [string] & { removed: string }
>;

export type RemovedFromRegistryEvent = TypedEvent<
  [string[], number] & { addresses: string[]; arg1: number }
>;

export class IAddressRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAddressRegistryInterface;

  functions: {
    addRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAddress(
      _addr: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAddressForType(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    removeFromRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  addRegistrar(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToRegistry(
    _addresses: string[],
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAddress(
    _addr: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAddressForType(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  removeFromRegistry(
    _addresses: string[],
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRegistrar(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addRegistrar(_addr: string, overrides?: CallOverrides): Promise<void>;

    addToRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAddress(
      _addr: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddressForType(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeFromRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRegistrar(_addr: string, overrides?: CallOverrides): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedToRegistry(address[],uint8)"(
      addresses?: null,
      undefined?: null
    ): TypedEventFilter<
      [string[], number],
      { addresses: string[]; arg1: number }
    >;

    AddedToRegistry(
      addresses?: null,
      undefined?: null
    ): TypedEventFilter<
      [string[], number],
      { addresses: string[]; arg1: number }
    >;

    "RegisteredAddressAdded(address)"(
      added?: null
    ): TypedEventFilter<[string], { added: string }>;

    RegisteredAddressAdded(
      added?: null
    ): TypedEventFilter<[string], { added: string }>;

    "RegisteredAddressRemoved(address)"(
      removed?: null
    ): TypedEventFilter<[string], { removed: string }>;

    RegisteredAddressRemoved(
      removed?: null
    ): TypedEventFilter<[string], { removed: string }>;

    "RemovedFromRegistry(address[],uint8)"(
      addresses?: null,
      undefined?: null
    ): TypedEventFilter<
      [string[], number],
      { addresses: string[]; arg1: number }
    >;

    RemovedFromRegistry(
      addresses?: null,
      undefined?: null
    ): TypedEventFilter<
      [string[], number],
      { addresses: string[]; arg1: number }
    >;
  };

  estimateGas: {
    addRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAddress(
      _addr: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressForType(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAddress(
      _addr: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressForType(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromRegistry(
      _addresses: string[],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRegistrar(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
