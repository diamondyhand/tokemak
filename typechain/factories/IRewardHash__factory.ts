/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IRewardHash, IRewardHashInterface } from "../IRewardHash";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cycleIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "latestClaimableHash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "cycleHash",
        type: "string",
      },
    ],
    name: "CycleHashAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "cycleHashes",
    outputs: [
      {
        internalType: "string",
        name: "latestClaimable",
        type: "string",
      },
      {
        internalType: "string",
        name: "cycle",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "latestClaimableIpfsHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "cycleIpfsHash",
        type: "string",
      },
    ],
    name: "setCycleHashes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IRewardHash__factory {
  static readonly abi = _abi;
  static createInterface(): IRewardHashInterface {
    return new utils.Interface(_abi) as IRewardHashInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRewardHash {
    return new Contract(address, _abi, signerOrProvider) as IRewardHash;
  }
}
