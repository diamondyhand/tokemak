/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BalancerHelpers,
  BalancerHelpersInterface,
} from "../BalancerHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IAsset[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "minAmountsOut",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.ExitPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "queryExit",
    outputs: [
      {
        internalType: "uint256",
        name: "bptIn",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IAsset[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maxAmountsIn",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.JoinPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "queryJoin",
    outputs: [
      {
        internalType: "uint256",
        name: "bptOut",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161104838038061104883398101604081905261002f916100bf565b806001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561006857600080fd5b505afa15801561007c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a091906100bf565b6001600160601b0319606091821b811660805291901b1660a0526100fa565b6000602082840312156100d0578081fd5b81516100db816100e2565b9392505050565b6001600160a01b03811681146100f757600080fd5b50565b60805160601c60a05160601c610f0d61013b6000398060a0528061016252806103535280610415528061051c528061058f5250806108835250610f0d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639ebbf05d14610046578063c7b2c52c14610070578063fbfa77cf14610083575b600080fd5b610059610054366004610c0f565b610098565b604051610067929190610e4f565b60405180910390f35b61005961007e366004610c0f565b61034b565b61008b61051a565b6040516100679190610df7565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c00927886040518263ffffffff1660e01b81526004016100f79190610d33565b604080518083038186803b15801561010e57600080fd5b505afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101469190610b07565b50905060008061015a89876000015161053e565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2946c2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c657600080fd5b505afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610c79565b90508373ffffffffffffffffffffffffffffffffffffffff166387ec68178b8b8b87878773ffffffffffffffffffffffffffffffffffffffff166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561026757600080fd5b505afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f9190610c9c565b8e604001516040518863ffffffff1660e01b81526004016102c69796959493929190610d3c565b600060405180830381600087803b1580156102e057600080fd5b505af11580156102f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261033a9190810190610cb4565b909b909a5098505050505050505050565b6000606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c00927886040518263ffffffff1660e01b81526004016103aa9190610d33565b604080518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610b07565b50905060008061040d89876000015161053e565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2946c2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047957600080fd5b505afa15801561048d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b19190610c79565b90508373ffffffffffffffffffffffffffffffffffffffff16636028bfd48b8b8b87878773ffffffffffffffffffffffffffffffffffffffff166355c676286040518163ffffffff1660e01b815260040160206040518083038186803b15801561026757600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b606060006060600061054f85610707565b6040517ff94d466800000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063f94d4668906105c4908990600401610d33565b60006040518083038186803b1580156105dc57600080fd5b505afa1580156105f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106369190810190610b43565b8351835192975090955091935014610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610e18565b60405180910390fd5b60005b82518110156106fd57600083828151811061069d57fe5b602002602001015190506106f48383815181106106b657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146102086107ba565b50600101610686565b5050509250929050565b60606000825167ffffffffffffffff8111801561072357600080fd5b5060405190808252806020026020018201604052801561074d578160200160208202803683370190505b50905060005b83518110156107b15761077884828151811061076b57fe5b60200260200101516107cc565b82828151811061078457fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610753565b5090505b919050565b816107c8576107c8816107f7565b5050565b60006107d782610864565b6107e9576107e48261087e565b6107f1565b6107f1610881565b92915050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b73ffffffffffffffffffffffffffffffffffffffff161590565b90565b7f000000000000000000000000000000000000000000000000000000000000000090565b600082601f8301126108b5578081fd5b813560206108ca6108c583610e94565b610e70565b82815281810190858301838502870184018810156108e6578586fd5b855b8581101561090d5781356108fb81610eb2565b845292840192908401906001016108e8565b5090979650505050505050565b600082601f83011261092a578081fd5b8135602061093a6108c583610e94565b8281528181019085830183850287018401881015610956578586fd5b855b8581101561090d57813584529284019290840190600101610958565b600082601f830112610984578081fd5b815160206109946108c583610e94565b82815281810190858301838502870184018810156109b0578586fd5b855b8581101561090d578151845292840192908401906001016109b2565b803580151581146107b557600080fd5b600082601f8301126109ee578081fd5b813567ffffffffffffffff811115610a0257fe5b610a3360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610e70565b818152846020838601011115610a47578283fd5b816020850160208301379081016020019190915292915050565b600060808284031215610a72578081fd5b610a7c6080610e70565b9050813567ffffffffffffffff80821115610a9657600080fd5b610aa2858386016108a5565b83526020840135915080821115610ab857600080fd5b610ac48583860161091a565b60208401526040840135915080821115610add57600080fd5b50610aea848285016109de565b604083015250610afc606083016109ce565b606082015292915050565b60008060408385031215610b19578182fd5b8251610b2481610eb2565b602084015190925060038110610b38578182fd5b809150509250929050565b600080600060608486031215610b57578081fd5b835167ffffffffffffffff80821115610b6e578283fd5b818601915086601f830112610b81578283fd5b81516020610b916108c583610e94565b82815281810190858301838502870184018c1015610bad578788fd5b8796505b84871015610bd8578051610bc481610eb2565b835260019690960195918301918301610bb1565b5091890151919750909350505080821115610bf1578283fd5b50610bfe86828701610974565b925050604084015190509250925092565b60008060008060808587031215610c24578182fd5b843593506020850135610c3681610eb2565b92506040850135610c4681610eb2565b9150606085013567ffffffffffffffff811115610c61578182fd5b610c6d87828801610a61565b91505092959194509250565b600060208284031215610c8a578081fd5b8151610c9581610eb2565b9392505050565b600060208284031215610cad578081fd5b5051919050565b60008060408385031215610cc6578182fd5b82519150602083015167ffffffffffffffff811115610ce3578182fd5b610cef85828601610974565b9150509250929050565b6000815180845260208085019450808401835b83811015610d2857815187529582019590820190600101610d0c565b509495945050505050565b90815260200190565b6000888252602073ffffffffffffffffffffffffffffffffffffffff808a168285015280891660408501525060e06060840152610d7c60e0840188610cf9565b8660808501528560a085015283810360c08501528451808252835b81811015610db2578681018401518382018501528301610d97565b81811115610dc257848483850101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f544f4b454e535f4c454e4754485f4d49534d4154434800000000000000000000604082015260600190565b600083825260406020830152610e686040830184610cf9565b949350505050565b60405181810167ffffffffffffffff81118282101715610e8c57fe5b604052919050565b600067ffffffffffffffff821115610ea857fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610ed457600080fd5b5056fea2646970667358221220ea346096e2df2caae1f754cf1194d76cd5ec7aeef3586c7a8cf628b2a299053f64736f6c63430007060033";

export class BalancerHelpers__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BalancerHelpers> {
    return super.deploy(_vault, overrides || {}) as Promise<BalancerHelpers>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): BalancerHelpers {
    return super.attach(address) as BalancerHelpers;
  }
  connect(signer: Signer): BalancerHelpers__factory {
    return super.connect(signer) as BalancerHelpers__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerHelpersInterface {
    return new utils.Interface(_abi) as BalancerHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerHelpers {
    return new Contract(address, _abi, signerOrProvider) as BalancerHelpers;
  }
}
