/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBalanceTrackerInterface extends ethers.utils.Interface {
  functions: {
    "addSupportedTokens(address[])": FunctionFragment;
    "getActualBalance(address,address[])": FunctionFragment;
    "getBalance(address,address[])": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "onEventReceive(address,bytes32,bytes)": FunctionFragment;
    "removeSupportedTokens(address[])": FunctionFragment;
    "setBalance(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSupportedTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualBalance",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onEventReceive",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [{ account: string; token: string; amount: BigNumberish }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onEventReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;

  events: {
    "BalanceDelegated(address,address,address)": EventFragment;
    "BalanceUpdate(address,address,uint256,bool,bool)": EventFragment;
    "SupportedTokensAdded(address[])": EventFragment;
    "SupportedTokensRemoved(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceDelegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokensAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokensRemoved"): EventFragment;
}

export type BalanceDelegatedEvent = TypedEvent<
  [string, string, string] & { token: string; from: string; to: string }
>;

export type BalanceUpdateEvent = TypedEvent<
  [string, string, BigNumber, boolean, boolean] & {
    account: string;
    token: string;
    amount: BigNumber;
    stateSynced: boolean;
    applied: boolean;
  }
>;

export type SupportedTokensAddedEvent = TypedEvent<
  [string[]] & { tokens: string[] }
>;

export type SupportedTokensRemovedEvent = TypedEvent<
  [string[]] & { tokens: string[] }
>;

export class IBalanceTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBalanceTrackerInterface;

  functions: {
    addSupportedTokens(
      tokensToSupport: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActualBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
        userBalances: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    getBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
        userBalances: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { supportedTokensArray: string[] }>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSupportedTokens(
      tokensToRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBalance(
      balances: { account: string; token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSupportedTokens(
    tokensToSupport: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActualBalance(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  getBalance(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

  onEventReceive(
    sender: string,
    eventType: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSupportedTokens(
    tokensToRemove: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBalance(
    balances: { account: string; token: string; amount: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSupportedTokens(
      tokensToSupport: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getActualBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    getBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportedTokens(
      tokensToRemove: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBalance(
      balances: { account: string; token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BalanceDelegated(address,address,address)"(
      token?: null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [string, string, string],
      { token: string; from: string; to: string }
    >;

    BalanceDelegated(
      token?: null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [string, string, string],
      { token: string; from: string; to: string }
    >;

    "BalanceUpdate(address,address,uint256,bool,bool)"(
      account?: null,
      token?: null,
      amount?: null,
      stateSynced?: null,
      applied?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        account: string;
        token: string;
        amount: BigNumber;
        stateSynced: boolean;
        applied: boolean;
      }
    >;

    BalanceUpdate(
      account?: null,
      token?: null,
      amount?: null,
      stateSynced?: null,
      applied?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, boolean],
      {
        account: string;
        token: string;
        amount: BigNumber;
        stateSynced: boolean;
        applied: boolean;
      }
    >;

    "SupportedTokensAdded(address[])"(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    SupportedTokensAdded(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    "SupportedTokensRemoved(address[])"(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    SupportedTokensRemoved(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;
  };

  estimateGas: {
    addSupportedTokens(
      tokensToSupport: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActualBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSupportedTokens(
      tokensToRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBalance(
      balances: { account: string; token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSupportedTokens(
      tokensToSupport: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActualBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSupportedTokens(
      tokensToRemove: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBalance(
      balances: { account: string; token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
