/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VoteTrackerInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_NAME()": FunctionFragment;
    "DOMAIN_VERSION()": FunctionFragment;
    "EIP191_HEADER()": FunctionFragment;
    "EIP712_DOMAIN_TYPEHASH()": FunctionFragment;
    "EVENT_TYPE_CYCLECOMPLETE()": FunctionFragment;
    "EVENT_TYPE_DELEGATIONDISABLED()": FunctionFragment;
    "EVENT_TYPE_DELEGATIONENABLED()": FunctionFragment;
    "EVENT_TYPE_DEPOSIT()": FunctionFragment;
    "EVENT_TYPE_SLASH()": FunctionFragment;
    "EVENT_TYPE_TRANSFER()": FunctionFragment;
    "EVENT_TYPE_VOTE()": FunctionFragment;
    "EVENT_TYPE_WITHDRAW()": FunctionFragment;
    "EVENT_TYPE_WITHDRAWALREQUEST()": FunctionFragment;
    "ONE_WITH_EIGHTEEN_PRECISION()": FunctionFragment;
    "USER_VOTE_ALLOCATION_ITEM_TYPEHASH()": FunctionFragment;
    "USER_VOTE_PAYLOAD_TYPEHASH()": FunctionFragment;
    "currentDomainSeparator()": FunctionFragment;
    "currentSigningChainId()": FunctionFragment;
    "eventProxy()": FunctionFragment;
    "getMaxVoteBalance(address)": FunctionFragment;
    "getReactorKeys()": FunctionFragment;
    "getSettings()": FunctionFragment;
    "getSystemVotes()": FunctionFragment;
    "getUserVotes(address)": FunctionFragment;
    "getVotingPower(tuple[])": FunctionFragment;
    "getVotingTokens()": FunctionFragment;
    "init(address)": FunctionFragment;
    "initialize(address,bytes32,address,uint256,tuple[])": FunctionFragment;
    "lastUserProxyVoteBlock(address)": FunctionFragment;
    "networkSettings()": FunctionFragment;
    "onEventReceive(address,bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "placementTokens(bytes32)": FunctionFragment;
    "proxySubmitters(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalanceTrackerAddress(address)": FunctionFragment;
    "setProxyRateLimit(uint256)": FunctionFragment;
    "setProxySubmitters(address[],bool)": FunctionFragment;
    "setReactorKeys(tuple[],bool)": FunctionFragment;
    "setVoteMultiplers(tuple[])": FunctionFragment;
    "settings()": FunctionFragment;
    "systemAggregations(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateUserVoteTotals(address[])": FunctionFragment;
    "userNonces(address)": FunctionFragment;
    "userVoteDetails(address)": FunctionFragment;
    "userVoteItems(address,bytes32)": FunctionFragment;
    "userVoteKeys(address,uint256)": FunctionFragment;
    "vote((address,bytes32,uint256,uint256,uint256,tuple[]),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "voteDirect((address,bytes32,uint256,uint256,uint256,tuple[]))": FunctionFragment;
    "voteMultipliers(address)": FunctionFragment;
    "votingTokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP191_HEADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_CYCLECOMPLETE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_DELEGATIONDISABLED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_DELEGATIONENABLED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_SLASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EVENT_TYPE_WITHDRAWALREQUEST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_WITH_EIGHTEEN_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_VOTE_ALLOCATION_ITEM_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USER_VOTE_PAYLOAD_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSigningChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVoteBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReactorKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [{ token: string; amount: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BytesLike,
      string,
      BigNumberish,
      { token: string; multiplier: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUserProxyVoteBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "networkSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onEventReceive",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placementTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxySubmitters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalanceTrackerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyRateLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxySubmitters",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReactorKeys",
    values: [{ token: string; key: BytesLike }[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteMultiplers",
    values: [{ token: string; multiplier: BigNumberish }[]]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemAggregations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUserVoteTotals",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "userNonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userVoteDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVoteItems",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userVoteKeys",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      {
        signatureType: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteDirect",
    values: [
      {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteMultipliers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP191_HEADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_CYCLECOMPLETE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_DELEGATIONDISABLED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_DELEGATIONENABLED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_SLASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EVENT_TYPE_WITHDRAWALREQUEST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_WITH_EIGHTEEN_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_VOTE_ALLOCATION_ITEM_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USER_VOTE_PAYLOAD_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSigningChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReactorKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUserProxyVoteBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onEventReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placementTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxySubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalanceTrackerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxySubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReactorKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteMultiplers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemAggregations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserVoteTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userVoteDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVoteItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVoteKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteDirect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingTokens",
    data: BytesLike
  ): Result;

  events: {
    "BalanceTrackerAddressSet(address)": EventFragment;
    "DelegatorUpdate(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProxyAddressSet(address)": EventFragment;
    "ProxyRateLimitSet(uint256)": EventFragment;
    "ProxySubmitterSet(address[],bool)": EventFragment;
    "ReactorKeysSet(bytes32[])": EventFragment;
    "SigningChainIdSet(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserAggregationUpdated(address)": EventFragment;
    "UserVoted(address,tuple)": EventFragment;
    "VoteMultipliersSet(tuple[])": EventFragment;
    "VoteSessionRollover(bytes32,tuple)": EventFragment;
    "WithdrawalRequestApplied(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceTrackerAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyRateLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySubmitterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReactorKeysSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SigningChainIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserAggregationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteMultipliersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteSessionRollover"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequestApplied"): EventFragment;
}

export type BalanceTrackerAddressSetEvent = TypedEvent<
  [string] & { contractAddress: string }
>;

export type DelegatorUpdateEvent = TypedEvent<
  [string, boolean] & { from: string; isDelegator: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type ProxyAddressSetEvent = TypedEvent<
  [string] & { proxyAddress: string }
>;

export type ProxyRateLimitSetEvent = TypedEvent<
  [BigNumber] & { voteEveryBlockLimit: BigNumber }
>;

export type ProxySubmitterSetEvent = TypedEvent<
  [string[], boolean] & { accounts: string[]; allowed: boolean }
>;

export type ReactorKeysSetEvent = TypedEvent<
  [string[]] & { allValidKeys: string[] }
>;

export type SigningChainIdSetEvent = TypedEvent<
  [BigNumber] & { chainId: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UserAggregationUpdatedEvent = TypedEvent<
  [string] & { account: string }
>;

export type UserVotedEvent = TypedEvent<
  [
    string,
    [
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      },
      ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
    ] & {
      details: [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      };
      votes: ([string, BigNumber] & {
        reactorKey: string;
        amount: BigNumber;
      })[];
    }
  ] & {
    account: string;
    votes: [
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      },
      ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
    ] & {
      details: [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      };
      votes: ([string, BigNumber] & {
        reactorKey: string;
        amount: BigNumber;
      })[];
    };
  }
>;

export type VoteMultipliersSetEvent = TypedEvent<
  [([string, BigNumber] & { token: string; multiplier: BigNumber })[]] & {
    multipliers: ([string, BigNumber] & {
      token: string;
      multiplier: BigNumber;
    })[];
  }
>;

export type VoteSessionRolloverEvent = TypedEvent<
  [
    string,
    [
      [string, BigNumber] & { voteSessionKey: string; totalVotes: BigNumber },
      ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[]
    ] & {
      details: [string, BigNumber] & {
        voteSessionKey: string;
        totalVotes: BigNumber;
      };
      votes: ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[];
    }
  ] & {
    newKey: string;
    votesAtRollover: [
      [string, BigNumber] & { voteSessionKey: string; totalVotes: BigNumber },
      ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[]
    ] & {
      details: [string, BigNumber] & {
        voteSessionKey: string;
        totalVotes: BigNumber;
      };
      votes: ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[];
    };
  }
>;

export type WithdrawalRequestAppliedEvent = TypedEvent<
  [
    string,
    [
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      },
      ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
    ] & {
      details: [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      };
      votes: ([string, BigNumber] & {
        reactorKey: string;
        amount: BigNumber;
      })[];
    }
  ] & {
    account: string;
    postApplicationVotes: [
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      },
      ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
    ] & {
      details: [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      };
      votes: ([string, BigNumber] & {
        reactorKey: string;
        amount: BigNumber;
      })[];
    };
  }
>;

export class VoteTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VoteTrackerInterface;

  functions: {
    DOMAIN_NAME(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<[string]>;

    EIP191_HEADER(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_CYCLECOMPLETE(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_DELEGATIONDISABLED(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_DELEGATIONENABLED(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_DEPOSIT(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_SLASH(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_TRANSFER(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_VOTE(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_WITHDRAW(overrides?: CallOverrides): Promise<[string]>;

    EVENT_TYPE_WITHDRAWALREQUEST(overrides?: CallOverrides): Promise<[string]>;

    ONE_WITH_EIGHTEEN_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    USER_VOTE_ALLOCATION_ITEM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    USER_VOTE_PAYLOAD_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    currentDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    currentSigningChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventProxy(overrides?: CallOverrides): Promise<[string]>;

    getMaxVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReactorKeys(
      overrides?: CallOverrides
    ): Promise<[string[]] & { reactorKeys: string[] }>;

    getSettings(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, string] & {
          balanceTrackerAddress: string;
          voteEveryBlockLimit: BigNumber;
          lastProcessedEventId: BigNumber;
          voteSessionKey: string;
        }
      ]
    >;

    getSystemVotes(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        }
      ] & {
        systemVotes: [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        };
      }
    >;

    getUserVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        }
      ]
    >;

    getVotingPower(
      balances: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votes: BigNumber }>;

    getVotingTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    init(
      eventProxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      eventProxy: string,
      initialVoteSession: BytesLike,
      balanceTracker: string,
      signingOnChain: BigNumberish,
      voteTokens: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastUserProxyVoteBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkSettings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { domainSeparator: string; chainId: BigNumber }
    >;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    placementTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxySubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBalanceTrackerAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProxyRateLimit(
      voteEveryBlockLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProxySubmitters(
      submitters: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReactorKeys(
      reactorKeys: { token: string; key: BytesLike }[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVoteMultiplers(
      multipliers: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        balanceTrackerAddress: string;
        voteEveryBlockLimit: BigNumber;
        lastProcessedEventId: BigNumber;
        voteSessionKey: string;
      }
    >;

    systemAggregations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserVoteTotals(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userNonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userVoteDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      }
    >;

    userVoteItems(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userVoteKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vote(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      signature: {
        signatureType: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteDirect(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

  DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

  EIP191_HEADER(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_CYCLECOMPLETE(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_DELEGATIONDISABLED(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_DELEGATIONENABLED(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_SLASH(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_TRANSFER(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_VOTE(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

  EVENT_TYPE_WITHDRAWALREQUEST(overrides?: CallOverrides): Promise<string>;

  ONE_WITH_EIGHTEEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USER_VOTE_ALLOCATION_ITEM_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  USER_VOTE_PAYLOAD_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  currentDomainSeparator(overrides?: CallOverrides): Promise<string>;

  currentSigningChainId(overrides?: CallOverrides): Promise<BigNumber>;

  eventProxy(overrides?: CallOverrides): Promise<string>;

  getMaxVoteBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReactorKeys(overrides?: CallOverrides): Promise<string[]>;

  getSettings(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      balanceTrackerAddress: string;
      voteEveryBlockLimit: BigNumber;
      lastProcessedEventId: BigNumber;
      voteSessionKey: string;
    }
  >;

  getSystemVotes(
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber] & { voteSessionKey: string; totalVotes: BigNumber },
      ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[]
    ] & {
      details: [string, BigNumber] & {
        voteSessionKey: string;
        totalVotes: BigNumber;
      };
      votes: ([string, string, BigNumber] & {
        token: string;
        reactorKey: string;
        totalVotes: BigNumber;
      })[];
    }
  >;

  getUserVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      },
      ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
    ] & {
      details: [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      };
      votes: ([string, BigNumber] & {
        reactorKey: string;
        amount: BigNumber;
      })[];
    }
  >;

  getVotingPower(
    balances: { token: string; amount: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingTokens(overrides?: CallOverrides): Promise<string[]>;

  init(
    eventProxyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    eventProxy: string,
    initialVoteSession: BytesLike,
    balanceTracker: string,
    signingOnChain: BigNumberish,
    voteTokens: { token: string; multiplier: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastUserProxyVoteBlock(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  networkSettings(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { domainSeparator: string; chainId: BigNumber }
  >;

  onEventReceive(
    sender: string,
    eventType: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  placementTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  proxySubmitters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBalanceTrackerAddress(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProxyRateLimit(
    voteEveryBlockLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProxySubmitters(
    submitters: string[],
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReactorKeys(
    reactorKeys: { token: string; key: BytesLike }[],
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVoteMultiplers(
    multipliers: { token: string; multiplier: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      balanceTrackerAddress: string;
      voteEveryBlockLimit: BigNumber;
      lastProcessedEventId: BigNumber;
      voteSessionKey: string;
    }
  >;

  systemAggregations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserVoteTotals(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userVoteDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalUsedVotes: BigNumber;
      totalAvailableVotes: BigNumber;
    }
  >;

  userVoteItems(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userVoteKeys(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vote(
    userVotePayload: {
      account: string;
      voteSessionKey: BytesLike;
      nonce: BigNumberish;
      chainId: BigNumberish;
      totalVotes: BigNumberish;
      allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
    },
    signature: {
      signatureType: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteDirect(
    userVotePayload: {
      account: string;
      voteSessionKey: BytesLike;
      nonce: BigNumberish;
      chainId: BigNumberish;
      totalVotes: BigNumberish;
      allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteMultipliers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_NAME(overrides?: CallOverrides): Promise<string>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<string>;

    EIP191_HEADER(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_CYCLECOMPLETE(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_DELEGATIONDISABLED(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_DELEGATIONENABLED(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_DEPOSIT(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_SLASH(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_TRANSFER(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_VOTE(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_WITHDRAW(overrides?: CallOverrides): Promise<string>;

    EVENT_TYPE_WITHDRAWALREQUEST(overrides?: CallOverrides): Promise<string>;

    ONE_WITH_EIGHTEEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USER_VOTE_ALLOCATION_ITEM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    USER_VOTE_PAYLOAD_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    currentDomainSeparator(overrides?: CallOverrides): Promise<string>;

    currentSigningChainId(overrides?: CallOverrides): Promise<BigNumber>;

    eventProxy(overrides?: CallOverrides): Promise<string>;

    getMaxVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactorKeys(overrides?: CallOverrides): Promise<string[]>;

    getSettings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        balanceTrackerAddress: string;
        voteEveryBlockLimit: BigNumber;
        lastProcessedEventId: BigNumber;
        voteSessionKey: string;
      }
    >;

    getSystemVotes(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber] & { voteSessionKey: string; totalVotes: BigNumber },
        ([string, string, BigNumber] & {
          token: string;
          reactorKey: string;
          totalVotes: BigNumber;
        })[]
      ] & {
        details: [string, BigNumber] & {
          voteSessionKey: string;
          totalVotes: BigNumber;
        };
        votes: ([string, string, BigNumber] & {
          token: string;
          reactorKey: string;
          totalVotes: BigNumber;
        })[];
      }
    >;

    getUserVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          totalUsedVotes: BigNumber;
          totalAvailableVotes: BigNumber;
        },
        ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
      ] & {
        details: [BigNumber, BigNumber] & {
          totalUsedVotes: BigNumber;
          totalAvailableVotes: BigNumber;
        };
        votes: ([string, BigNumber] & {
          reactorKey: string;
          amount: BigNumber;
        })[];
      }
    >;

    getVotingPower(
      balances: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingTokens(overrides?: CallOverrides): Promise<string[]>;

    init(eventProxyAddress: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      eventProxy: string,
      initialVoteSession: BytesLike,
      balanceTracker: string,
      signingOnChain: BigNumberish,
      voteTokens: { token: string; multiplier: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    lastUserProxyVoteBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkSettings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { domainSeparator: string; chainId: BigNumber }
    >;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    placementTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    proxySubmitters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBalanceTrackerAddress(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyRateLimit(
      voteEveryBlockLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxySubmitters(
      submitters: string[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReactorKeys(
      reactorKeys: { token: string; key: BytesLike }[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoteMultiplers(
      multipliers: { token: string; multiplier: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        balanceTrackerAddress: string;
        voteEveryBlockLimit: BigNumber;
        lastProcessedEventId: BigNumber;
        voteSessionKey: string;
      }
    >;

    systemAggregations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateUserVoteTotals(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    userNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userVoteDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalUsedVotes: BigNumber;
        totalAvailableVotes: BigNumber;
      }
    >;

    userVoteItems(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVoteKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vote(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      signature: {
        signatureType: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    voteDirect(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    voteMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BalanceTrackerAddressSet(address)"(
      contractAddress?: null
    ): TypedEventFilter<[string], { contractAddress: string }>;

    BalanceTrackerAddressSet(
      contractAddress?: null
    ): TypedEventFilter<[string], { contractAddress: string }>;

    "DelegatorUpdate(address,bool)"(
      from?: null,
      isDelegator?: null
    ): TypedEventFilter<
      [string, boolean],
      { from: string; isDelegator: boolean }
    >;

    DelegatorUpdate(
      from?: null,
      isDelegator?: null
    ): TypedEventFilter<
      [string, boolean],
      { from: string; isDelegator: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "ProxyAddressSet(address)"(
      proxyAddress?: null
    ): TypedEventFilter<[string], { proxyAddress: string }>;

    ProxyAddressSet(
      proxyAddress?: null
    ): TypedEventFilter<[string], { proxyAddress: string }>;

    "ProxyRateLimitSet(uint256)"(
      voteEveryBlockLimit?: null
    ): TypedEventFilter<[BigNumber], { voteEveryBlockLimit: BigNumber }>;

    ProxyRateLimitSet(
      voteEveryBlockLimit?: null
    ): TypedEventFilter<[BigNumber], { voteEveryBlockLimit: BigNumber }>;

    "ProxySubmitterSet(address[],bool)"(
      accounts?: null,
      allowed?: null
    ): TypedEventFilter<
      [string[], boolean],
      { accounts: string[]; allowed: boolean }
    >;

    ProxySubmitterSet(
      accounts?: null,
      allowed?: null
    ): TypedEventFilter<
      [string[], boolean],
      { accounts: string[]; allowed: boolean }
    >;

    "ReactorKeysSet(bytes32[])"(
      allValidKeys?: null
    ): TypedEventFilter<[string[]], { allValidKeys: string[] }>;

    ReactorKeysSet(
      allValidKeys?: null
    ): TypedEventFilter<[string[]], { allValidKeys: string[] }>;

    "SigningChainIdSet(uint256)"(
      chainId?: null
    ): TypedEventFilter<[BigNumber], { chainId: BigNumber }>;

    SigningChainIdSet(
      chainId?: null
    ): TypedEventFilter<[BigNumber], { chainId: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UserAggregationUpdated(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    UserAggregationUpdated(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "UserVoted(address,tuple)"(
      account?: null,
      votes?: null
    ): TypedEventFilter<
      [
        string,
        [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        }
      ],
      {
        account: string;
        votes: [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        };
      }
    >;

    UserVoted(
      account?: null,
      votes?: null
    ): TypedEventFilter<
      [
        string,
        [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        }
      ],
      {
        account: string;
        votes: [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        };
      }
    >;

    "VoteMultipliersSet(tuple[])"(
      multipliers?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; multiplier: BigNumber })[]],
      {
        multipliers: ([string, BigNumber] & {
          token: string;
          multiplier: BigNumber;
        })[];
      }
    >;

    VoteMultipliersSet(
      multipliers?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; multiplier: BigNumber })[]],
      {
        multipliers: ([string, BigNumber] & {
          token: string;
          multiplier: BigNumber;
        })[];
      }
    >;

    "VoteSessionRollover(bytes32,tuple)"(
      newKey?: null,
      votesAtRollover?: null
    ): TypedEventFilter<
      [
        string,
        [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        }
      ],
      {
        newKey: string;
        votesAtRollover: [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        };
      }
    >;

    VoteSessionRollover(
      newKey?: null,
      votesAtRollover?: null
    ): TypedEventFilter<
      [
        string,
        [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        }
      ],
      {
        newKey: string;
        votesAtRollover: [
          [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          },
          ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[]
        ] & {
          details: [string, BigNumber] & {
            voteSessionKey: string;
            totalVotes: BigNumber;
          };
          votes: ([string, string, BigNumber] & {
            token: string;
            reactorKey: string;
            totalVotes: BigNumber;
          })[];
        };
      }
    >;

    "WithdrawalRequestApplied(address,tuple)"(
      account?: null,
      postApplicationVotes?: null
    ): TypedEventFilter<
      [
        string,
        [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        }
      ],
      {
        account: string;
        postApplicationVotes: [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        };
      }
    >;

    WithdrawalRequestApplied(
      account?: null,
      postApplicationVotes?: null
    ): TypedEventFilter<
      [
        string,
        [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        }
      ],
      {
        account: string;
        postApplicationVotes: [
          [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          },
          ([string, BigNumber] & { reactorKey: string; amount: BigNumber })[]
        ] & {
          details: [BigNumber, BigNumber] & {
            totalUsedVotes: BigNumber;
            totalAvailableVotes: BigNumber;
          };
          votes: ([string, BigNumber] & {
            reactorKey: string;
            amount: BigNumber;
          })[];
        };
      }
    >;
  };

  estimateGas: {
    DOMAIN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    EIP191_HEADER(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_CYCLECOMPLETE(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_DELEGATIONDISABLED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EVENT_TYPE_DELEGATIONENABLED(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_SLASH(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    EVENT_TYPE_WITHDRAWALREQUEST(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_WITH_EIGHTEEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USER_VOTE_ALLOCATION_ITEM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    USER_VOTE_PAYLOAD_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    currentDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    currentSigningChainId(overrides?: CallOverrides): Promise<BigNumber>;

    eventProxy(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReactorKeys(overrides?: CallOverrides): Promise<BigNumber>;

    getSettings(overrides?: CallOverrides): Promise<BigNumber>;

    getSystemVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPower(
      balances: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      eventProxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      eventProxy: string,
      initialVoteSession: BytesLike,
      balanceTracker: string,
      signingOnChain: BigNumberish,
      voteTokens: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastUserProxyVoteBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkSettings(overrides?: CallOverrides): Promise<BigNumber>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    placementTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxySubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBalanceTrackerAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProxyRateLimit(
      voteEveryBlockLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProxySubmitters(
      submitters: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReactorKeys(
      reactorKeys: { token: string; key: BytesLike }[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVoteMultiplers(
      multipliers: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    systemAggregations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserVoteTotals(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userVoteDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVoteItems(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVoteKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      signature: {
        signatureType: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteDirect(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP191_HEADER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_CYCLECOMPLETE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_DELEGATIONDISABLED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_DELEGATIONENABLED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_DEPOSIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_SLASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EVENT_TYPE_TRANSFER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_VOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EVENT_TYPE_WITHDRAW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EVENT_TYPE_WITHDRAWALREQUEST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_WITH_EIGHTEEN_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USER_VOTE_ALLOCATION_ITEM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USER_VOTE_PAYLOAD_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSigningChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReactorKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSystemVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPower(
      balances: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      eventProxyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      eventProxy: string,
      initialVoteSession: BytesLike,
      balanceTracker: string,
      signingOnChain: BigNumberish,
      voteTokens: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastUserProxyVoteBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onEventReceive(
      sender: string,
      eventType: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placementTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxySubmitters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBalanceTrackerAddress(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProxyRateLimit(
      voteEveryBlockLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProxySubmitters(
      submitters: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReactorKeys(
      reactorKeys: { token: string; key: BytesLike }[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVoteMultiplers(
      multipliers: { token: string; multiplier: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemAggregations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserVoteTotals(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVoteDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVoteItems(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVoteKeys(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      signature: {
        signatureType: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteDirect(
      userVotePayload: {
        account: string;
        voteSessionKey: BytesLike;
        nonce: BigNumberish;
        chainId: BigNumberish;
        totalVotes: BigNumberish;
        allocations: { reactorKey: BytesLike; amount: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteMultipliers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
