/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DefiRoundInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "accountBalance(address)": FunctionFragment;
    "addSupportedTokens(tuple[])": FunctionFragment;
    "configureWhitelist((bool,bytes32))": FunctionFragment;
    "currentStage()": FunctionFragment;
    "deposit((address,uint256),bytes32[])": FunctionFragment;
    "finalizeAssets(bool)": FunctionFragment;
    "getAccountData(address)": FunctionFragment;
    "getGenesisPools(address[])": FunctionFragment;
    "getMaxTotalValue()": FunctionFragment;
    "getRateAdjustedAmounts(uint256,address)": FunctionFragment;
    "getRates(address[])": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "getTokenOracles(address[])": FunctionFragment;
    "lastLookExpiration()": FunctionFragment;
    "overSubscriptionRate()": FunctionFragment;
    "owner()": FunctionFragment;
    "publishRates(tuple[],(uint256,uint256),uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalSupply(address)": FunctionFragment;
    "totalValue()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToTreasury()": FunctionFragment;
    "treasury()": FunctionFragment;
    "whitelistSettings()": FunctionFragment;
    "withdraw((address,uint256),bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedTokens",
    values: [
      {
        token: string;
        oracle: string;
        genesis: string;
        maxLimit: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureWhitelist",
    values: [{ enabled: boolean; root: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [{ token: string; amount: BigNumberish }, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAssets",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGenesisPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRateAdjustedAmounts",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getRates", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenOracles",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLookExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overSubscriptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishRates",
    values: [
      { token: string; numerator: BigNumberish; denominator: BigNumberish }[],
      { overNumerator: BigNumberish; overDenominator: BigNumberish },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSupply", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [{ token: string; amount: BigNumberish }, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGenesisPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateAdjustedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLookExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overSubscriptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AssetsFinalized(address,address,uint256)": EventFragment;
    "Deposited(address,tuple)": EventFragment;
    "GenesisTransfer(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatesPublished(tuple[])": EventFragment;
    "SupportedTokensAdded(tuple[])": EventFragment;
    "TreasuryTransfer(tuple[])": EventFragment;
    "WhitelistConfigured(tuple)": EventFragment;
    "Withdrawn(address,tuple,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetsFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenesisTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokensAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type AssetsFinalizedEvent = TypedEvent<
  [string, string, BigNumber] & {
    claimer: string;
    token: string;
    assetsMoved: BigNumber;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, [string, BigNumber] & { token: string; amount: BigNumber }] & {
    depositor: string;
    tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
  }
>;

export type GenesisTransferEvent = TypedEvent<
  [string, BigNumber] & { user: string; amountTransferred: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RatesPublishedEvent = TypedEvent<
  [
    ([string, BigNumber, BigNumber] & {
      token: string;
      numerator: BigNumber;
      denominator: BigNumber;
    })[]
  ] & {
    ratesData: ([string, BigNumber, BigNumber] & {
      token: string;
      numerator: BigNumber;
      denominator: BigNumber;
    })[];
  }
>;

export type SupportedTokensAddedEvent = TypedEvent<
  [
    ([string, string, string, BigNumber] & {
      token: string;
      oracle: string;
      genesis: string;
      maxLimit: BigNumber;
    })[]
  ] & {
    tokenData: ([string, string, string, BigNumber] & {
      token: string;
      oracle: string;
      genesis: string;
      maxLimit: BigNumber;
    })[];
  }
>;

export type TreasuryTransferEvent = TypedEvent<
  [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
    tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[];
  }
>;

export type WhitelistConfiguredEvent = TypedEvent<
  [[boolean, string] & { enabled: boolean; root: string }] & {
    settings: [boolean, string] & { enabled: boolean; root: string };
  }
>;

export type WithdrawnEvent = TypedEvent<
  [
    string,
    [string, BigNumber] & { token: string; amount: BigNumber },
    boolean
  ] & {
    withdrawer: string;
    tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
    asETH: boolean;
  }
>;

export class DefiRound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DefiRoundInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    accountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        oracle: string;
        genesis: string;
        maxLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentStage(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      tokenInfo: { token: string; amount: BigNumberish },
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeAssets(
      depositToGenesis: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          initialDeposit: BigNumber;
          currentBalance: BigNumber;
          effectiveAmt: BigNumber;
          ineffectiveAmt: BigNumber;
          actualTokeReceived: BigNumber;
        })[]
      ] & {
        data: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          token: string;
          initialDeposit: BigNumber;
          currentBalance: BigNumber;
          effectiveAmt: BigNumber;
          ineffectiveAmt: BigNumber;
          actualTokeReceived: BigNumber;
        })[];
      }
    >;

    getGenesisPools(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { genesisAddresses: string[] }>;

    getMaxTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getRates(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[]
      ] & {
        rates: ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[];
      }
    >;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getTokenOracles(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { oracleAddresses: string[] }>;

    lastLookExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    overSubscriptionRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        overNumerator: BigNumber;
        overDenominator: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publishRates(
      ratesData: {
        token: string;
        numerator: BigNumberish;
        denominator: BigNumberish;
      }[],
      oversubRate: {
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
      },
      lastLookDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    whitelistSettings(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

    withdraw(
      tokenInfo: { token: string; amount: BigNumberish },
      asETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  accountBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addSupportedTokens(
    tokensToSupport: {
      token: string;
      oracle: string;
      genesis: string;
      maxLimit: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureWhitelist(
    settings: { enabled: boolean; root: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentStage(overrides?: CallOverrides): Promise<number>;

  deposit(
    tokenInfo: { token: string; amount: BigNumberish },
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeAssets(
    depositToGenesis: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountData(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      initialDeposit: BigNumber;
      currentBalance: BigNumber;
      effectiveAmt: BigNumber;
      ineffectiveAmt: BigNumber;
      actualTokeReceived: BigNumber;
    })[]
  >;

  getGenesisPools(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMaxTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  getRateAdjustedAmounts(
    balance: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getRates(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      token: string;
      numerator: BigNumber;
      denominator: BigNumber;
    })[]
  >;

  getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

  getTokenOracles(
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  lastLookExpiration(overrides?: CallOverrides): Promise<BigNumber>;

  overSubscriptionRate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      overNumerator: BigNumber;
      overDenominator: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  publishRates(
    ratesData: {
      token: string;
      numerator: BigNumberish;
      denominator: BigNumberish;
    }[],
    oversubRate: { overNumerator: BigNumberish; overDenominator: BigNumberish },
    lastLookDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalValue(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  whitelistSettings(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

  withdraw(
    tokenInfo: { token: string; amount: BigNumberish },
    asETH: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    accountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        oracle: string;
        genesis: string;
        maxLimit: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    currentStage(overrides?: CallOverrides): Promise<number>;

    deposit(
      tokenInfo: { token: string; amount: BigNumberish },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeAssets(
      depositToGenesis: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        initialDeposit: BigNumber;
        currentBalance: BigNumber;
        effectiveAmt: BigNumber;
        ineffectiveAmt: BigNumber;
        actualTokeReceived: BigNumber;
      })[]
    >;

    getGenesisPools(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMaxTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getRates(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        token: string;
        numerator: BigNumber;
        denominator: BigNumber;
      })[]
    >;

    getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

    getTokenOracles(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    lastLookExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    overSubscriptionRate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        overNumerator: BigNumber;
        overDenominator: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    publishRates(
      ratesData: {
        token: string;
        numerator: BigNumberish;
        denominator: BigNumberish;
      }[],
      oversubRate: {
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
      },
      lastLookDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToTreasury(overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    whitelistSettings(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { enabled: boolean; root: string }>;

    withdraw(
      tokenInfo: { token: string; amount: BigNumberish },
      asETH: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetsFinalized(address,address,uint256)"(
      claimer?: null,
      token?: null,
      assetsMoved?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { claimer: string; token: string; assetsMoved: BigNumber }
    >;

    AssetsFinalized(
      claimer?: null,
      token?: null,
      assetsMoved?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { claimer: string; token: string; assetsMoved: BigNumber }
    >;

    "Deposited(address,tuple)"(
      depositor?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, [string, BigNumber] & { token: string; amount: BigNumber }],
      {
        depositor: string;
        tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;

    Deposited(
      depositor?: null,
      tokenInfo?: null
    ): TypedEventFilter<
      [string, [string, BigNumber] & { token: string; amount: BigNumber }],
      {
        depositor: string;
        tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;

    "GenesisTransfer(address,uint256)"(
      user?: null,
      amountTransferred?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amountTransferred: BigNumber }
    >;

    GenesisTransfer(
      user?: null,
      amountTransferred?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amountTransferred: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RatesPublished(tuple[])"(
      ratesData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[]
      ],
      {
        ratesData: ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[];
      }
    >;

    RatesPublished(
      ratesData?: null
    ): TypedEventFilter<
      [
        ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[]
      ],
      {
        ratesData: ([string, BigNumber, BigNumber] & {
          token: string;
          numerator: BigNumber;
          denominator: BigNumber;
        })[];
      }
    >;

    "SupportedTokensAdded(tuple[])"(
      tokenData?: null
    ): TypedEventFilter<
      [
        ([string, string, string, BigNumber] & {
          token: string;
          oracle: string;
          genesis: string;
          maxLimit: BigNumber;
        })[]
      ],
      {
        tokenData: ([string, string, string, BigNumber] & {
          token: string;
          oracle: string;
          genesis: string;
          maxLimit: BigNumber;
        })[];
      }
    >;

    SupportedTokensAdded(
      tokenData?: null
    ): TypedEventFilter<
      [
        ([string, string, string, BigNumber] & {
          token: string;
          oracle: string;
          genesis: string;
          maxLimit: BigNumber;
        })[]
      ],
      {
        tokenData: ([string, string, string, BigNumber] & {
          token: string;
          oracle: string;
          genesis: string;
          maxLimit: BigNumber;
        })[];
      }
    >;

    "TreasuryTransfer(tuple[])"(
      tokens?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]],
      { tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[] }
    >;

    TreasuryTransfer(
      tokens?: null
    ): TypedEventFilter<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]],
      { tokens: ([string, BigNumber] & { token: string; amount: BigNumber })[] }
    >;

    "WhitelistConfigured(tuple)"(
      settings?: null
    ): TypedEventFilter<
      [[boolean, string] & { enabled: boolean; root: string }],
      { settings: [boolean, string] & { enabled: boolean; root: string } }
    >;

    WhitelistConfigured(
      settings?: null
    ): TypedEventFilter<
      [[boolean, string] & { enabled: boolean; root: string }],
      { settings: [boolean, string] & { enabled: boolean; root: string } }
    >;

    "Withdrawn(address,tuple,bool)"(
      withdrawer?: null,
      tokenInfo?: null,
      asETH?: null
    ): TypedEventFilter<
      [
        string,
        [string, BigNumber] & { token: string; amount: BigNumber },
        boolean
      ],
      {
        withdrawer: string;
        tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
        asETH: boolean;
      }
    >;

    Withdrawn(
      withdrawer?: null,
      tokenInfo?: null,
      asETH?: null
    ): TypedEventFilter<
      [
        string,
        [string, BigNumber] & { token: string; amount: BigNumber },
        boolean
      ],
      {
        withdrawer: string;
        tokenInfo: [string, BigNumber] & { token: string; amount: BigNumber };
        asETH: boolean;
      }
    >;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    accountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        oracle: string;
        genesis: string;
        maxLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentStage(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenInfo: { token: string; amount: BigNumberish },
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeAssets(
      depositToGenesis: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGenesisPools(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRates(tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenOracles(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastLookExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    overSubscriptionRate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publishRates(
      ratesData: {
        token: string;
        numerator: BigNumberish;
        denominator: BigNumberish;
      }[],
      oversubRate: {
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
      },
      lastLookDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistSettings(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenInfo: { token: string; amount: BigNumberish },
      asETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSupportedTokens(
      tokensToSupport: {
        token: string;
        oracle: string;
        genesis: string;
        maxLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureWhitelist(
      settings: { enabled: boolean; root: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tokenInfo: { token: string; amount: BigNumberish },
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeAssets(
      depositToGenesis: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGenesisPools(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRateAdjustedAmounts(
      balance: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRates(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenOracles(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLookExpiration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overSubscriptionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishRates(
      ratesData: {
        token: string;
        numerator: BigNumberish;
        denominator: BigNumberish;
      }[],
      oversubRate: {
        overNumerator: BigNumberish;
        overDenominator: BigNumberish;
      },
      lastLookDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tokenInfo: { token: string; amount: BigNumberish },
      asETH: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
